// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The object could not be created.
pub const E_CREATE_FAILED : HRESULT = HRESULT::from_constant(0x802A0001); // UI_E_CREATE_FAILED

/// Shutdown was already called on this object or the object that owns it.
pub const E_SHUTDOWN_CALLED : HRESULT = HRESULT::from_constant(0x802A0002); // UI_E_SHUTDOWN_CALLED

/// This method cannot be called during this type of callback.
pub const E_ILLEGAL_REENTRANCY : HRESULT = HRESULT::from_constant(0x802A0003); // UI_E_ILLEGAL_REENTRANCY

/// This object has been sealed, so this change is no longer allowed.
pub const E_OBJECT_SEALED : HRESULT = HRESULT::from_constant(0x802A0004); // UI_E_OBJECT_SEALED

/// The requested value was never set.
pub const E_VALUE_NOT_SET : HRESULT = HRESULT::from_constant(0x802A0005); // UI_E_VALUE_NOT_SET

/// The requested value cannot be determined.
pub const E_VALUE_NOT_DETERMINED : HRESULT = HRESULT::from_constant(0x802A0006); // UI_E_VALUE_NOT_DETERMINED

/// A callback returned an invalid output parameter.
pub const E_INVALID_OUTPUT : HRESULT = HRESULT::from_constant(0x802A0007); // UI_E_INVALID_OUTPUT

/// A callback returned a success code other than S_OK or S_FALSE.
pub const E_BOOLEAN_EXPECTED : HRESULT = HRESULT::from_constant(0x802A0008); // UI_E_BOOLEAN_EXPECTED

/// A parameter that should be owned by this object is owned by a different object.
pub const E_DIFFERENT_OWNER : HRESULT = HRESULT::from_constant(0x802A0009); // UI_E_DIFFERENT_OWNER

/// More than one item matched the search criteria.
pub const E_AMBIGUOUS_MATCH : HRESULT = HRESULT::from_constant(0x802A000A); // UI_E_AMBIGUOUS_MATCH

/// A floating-point overflow occurred.
pub const E_FP_OVERFLOW : HRESULT = HRESULT::from_constant(0x802A000B); // UI_E_FP_OVERFLOW

/// This method can only be called from the thread that created the object.
pub const E_WRONG_THREAD : HRESULT = HRESULT::from_constant(0x802A000C); // UI_E_WRONG_THREAD

/// The storyboard is currently in the schedule.
pub const E_STORYBOARD_ACTIVE : HRESULT = HRESULT::from_constant(0x802A0101); // UI_E_STORYBOARD_ACTIVE

/// The storyboard is not playing.
pub const E_STORYBOARD_NOT_PLAYING : HRESULT = HRESULT::from_constant(0x802A0102); // UI_E_STORYBOARD_NOT_PLAYING

/// The start keyframe might occur after the end keyframe.
pub const E_START_KEYFRAME_AFTER_END : HRESULT = HRESULT::from_constant(0x802A0103); // UI_E_START_KEYFRAME_AFTER_END

/// It might not be possible to determine the end keyframe time when the start keyframe is reached.
pub const E_END_KEYFRAME_NOT_DETERMINED : HRESULT = HRESULT::from_constant(0x802A0104); // UI_E_END_KEYFRAME_NOT_DETERMINED

/// Two repeated portions of a storyboard might overlap.
pub const E_LOOPS_OVERLAP : HRESULT = HRESULT::from_constant(0x802A0105); // UI_E_LOOPS_OVERLAP

/// The transition has already been added to a storyboard.
pub const E_TRANSITION_ALREADY_USED : HRESULT = HRESULT::from_constant(0x802A0106); // UI_E_TRANSITION_ALREADY_USED

/// The transition has not been added to a storyboard.
pub const E_TRANSITION_NOT_IN_STORYBOARD : HRESULT = HRESULT::from_constant(0x802A0107); // UI_E_TRANSITION_NOT_IN_STORYBOARD

/// The transition might eclipse the beginning of another transition in the storyboard.
pub const E_TRANSITION_ECLIPSED : HRESULT = HRESULT::from_constant(0x802A0108); // UI_E_TRANSITION_ECLIPSED

/// The given time is earlier than the time passed to the last update.
pub const E_TIME_BEFORE_LAST_UPDATE : HRESULT = HRESULT::from_constant(0x802A0109); // UI_E_TIME_BEFORE_LAST_UPDATE

/// This client is already connected to a timer.
pub const E_TIMER_CLIENT_ALREADY_CONNECTED : HRESULT = HRESULT::from_constant(0x802A010A); // UI_E_TIMER_CLIENT_ALREADY_CONNECTED

/// The passed dimension is invalid or does not match the object's dimension.
pub const E_INVALID_DIMENSION : HRESULT = HRESULT::from_constant(0x802A010B); // UI_E_INVALID_DIMENSION

/// The added primitive begins at or beyond the duration of the interpolator.
pub const E_PRIMITIVE_OUT_OF_BOUNDS : HRESULT = HRESULT::from_constant(0x802A010C); // UI_E_PRIMITIVE_OUT_OF_BOUNDS

/// The operation cannot be completed because the window is being closed.
pub const E_WINDOW_CLOSED : HRESULT = HRESULT::from_constant(0x802A0201); // UI_E_WINDOW_CLOSED
