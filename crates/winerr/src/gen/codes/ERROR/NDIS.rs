// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The binding to the network interface is being closed.
pub const INTERFACE_CLOSING : HRESULT = HRESULT::from_constant(0x80340002); // ERROR_NDIS_INTERFACE_CLOSING

/// An invalid version was specified.
pub const BAD_VERSION : HRESULT = HRESULT::from_constant(0x80340004); // ERROR_NDIS_BAD_VERSION

/// An invalid characteristics table was used.
pub const BAD_CHARACTERISTICS : HRESULT = HRESULT::from_constant(0x80340005); // ERROR_NDIS_BAD_CHARACTERISTICS

/// Failed to find the network interface or network interface is not ready.
pub const ADAPTER_NOT_FOUND : HRESULT = HRESULT::from_constant(0x80340006); // ERROR_NDIS_ADAPTER_NOT_FOUND

/// Failed to open the network interface.
pub const OPEN_FAILED : HRESULT = HRESULT::from_constant(0x80340007); // ERROR_NDIS_OPEN_FAILED

/// Network interface has encountered an internal unrecoverable failure.
pub const DEVICE_FAILED : HRESULT = HRESULT::from_constant(0x80340008); // ERROR_NDIS_DEVICE_FAILED

/// The multicast list on the network interface is full.
pub const MULTICAST_FULL : HRESULT = HRESULT::from_constant(0x80340009); // ERROR_NDIS_MULTICAST_FULL

/// An attempt was made to add a duplicate multicast address to the list.
pub const MULTICAST_EXISTS : HRESULT = HRESULT::from_constant(0x8034000A); // ERROR_NDIS_MULTICAST_EXISTS

/// At attempt was made to remove a multicast address that was never added.
pub const MULTICAST_NOT_FOUND : HRESULT = HRESULT::from_constant(0x8034000B); // ERROR_NDIS_MULTICAST_NOT_FOUND

/// Netowork interface aborted the request.
pub const REQUEST_ABORTED : HRESULT = HRESULT::from_constant(0x8034000C); // ERROR_NDIS_REQUEST_ABORTED

/// Network interface can not process the request because it is being reset.
pub const RESET_IN_PROGRESS : HRESULT = HRESULT::from_constant(0x8034000D); // ERROR_NDIS_RESET_IN_PROGRESS

/// Netword interface does not support this request.
pub const NOT_SUPPORTED : HRESULT = HRESULT::from_constant(0x803400BB); // ERROR_NDIS_NOT_SUPPORTED

/// An attempt was made to send an invalid packet on a network interface.
pub const INVALID_PACKET : HRESULT = HRESULT::from_constant(0x8034000F); // ERROR_NDIS_INVALID_PACKET

/// Network interface is not ready to complete this operation.
pub const ADAPTER_NOT_READY : HRESULT = HRESULT::from_constant(0x80340011); // ERROR_NDIS_ADAPTER_NOT_READY

/// The length of the buffer submitted for this operation is not valid.
pub const INVALID_LENGTH : HRESULT = HRESULT::from_constant(0x80340014); // ERROR_NDIS_INVALID_LENGTH

/// The data used for this operation is not valid.
pub const INVALID_DATA : HRESULT = HRESULT::from_constant(0x80340015); // ERROR_NDIS_INVALID_DATA

/// The length of buffer submitted for this operation is too small.
pub const BUFFER_TOO_SHORT : HRESULT = HRESULT::from_constant(0x80340016); // ERROR_NDIS_BUFFER_TOO_SHORT

/// Network interface does not support this OID (Object Identifier)
pub const INVALID_OID : HRESULT = HRESULT::from_constant(0x80340017); // ERROR_NDIS_INVALID_OID

/// The network interface has been removed.
pub const ADAPTER_REMOVED : HRESULT = HRESULT::from_constant(0x80340018); // ERROR_NDIS_ADAPTER_REMOVED

/// Network interface does not support this media type.
pub const UNSUPPORTED_MEDIA : HRESULT = HRESULT::from_constant(0x80340019); // ERROR_NDIS_UNSUPPORTED_MEDIA

/// An attempt was made to remove a token ring group address that is in use by other components.
pub const GROUP_ADDRESS_IN_USE : HRESULT = HRESULT::from_constant(0x8034001A); // ERROR_NDIS_GROUP_ADDRESS_IN_USE

/// An attempt was made to map a file that can not be found.
pub const FILE_NOT_FOUND : HRESULT = HRESULT::from_constant(0x8034001B); // ERROR_NDIS_FILE_NOT_FOUND

/// An error occurred while NDIS tried to map the file.
pub const ERROR_READING_FILE : HRESULT = HRESULT::from_constant(0x8034001C); // ERROR_NDIS_ERROR_READING_FILE

/// An attempt was made to map a file that is alreay mapped.
pub const ALREADY_MAPPED : HRESULT = HRESULT::from_constant(0x8034001D); // ERROR_NDIS_ALREADY_MAPPED

/// An attempt to allocate a hardware resource failed because the resource is used by another component.
pub const RESOURCE_CONFLICT : HRESULT = HRESULT::from_constant(0x8034001E); // ERROR_NDIS_RESOURCE_CONFLICT

/// The I/O operation failed because network media is disconnected or wireless access point is out of range.
pub const MEDIA_DISCONNECTED : HRESULT = HRESULT::from_constant(0x8034001F); // ERROR_NDIS_MEDIA_DISCONNECTED

/// The network address used in the request is invalid.
pub const INVALID_ADDRESS : HRESULT = HRESULT::from_constant(0x80340022); // ERROR_NDIS_INVALID_ADDRESS

/// The specified request is not a valid operation for the target device.
pub const INVALID_DEVICE_REQUEST : HRESULT = HRESULT::from_constant(0x80340010); // ERROR_NDIS_INVALID_DEVICE_REQUEST

/// The offload operation on the network interface has been paused.
pub const PAUSED : HRESULT = HRESULT::from_constant(0x8034002A); // ERROR_NDIS_PAUSED

/// Network interface was not found.
pub const INTERFACE_NOT_FOUND : HRESULT = HRESULT::from_constant(0x8034002B); // ERROR_NDIS_INTERFACE_NOT_FOUND

/// The revision number specified in the structure is not supported.
pub const UNSUPPORTED_REVISION : HRESULT = HRESULT::from_constant(0x8034002C); // ERROR_NDIS_UNSUPPORTED_REVISION

/// The specified port does not exist on this network interface.
pub const INVALID_PORT : HRESULT = HRESULT::from_constant(0x8034002D); // ERROR_NDIS_INVALID_PORT

/// The current state of the specified port on this network interface does not support the requested operation.
pub const INVALID_PORT_STATE : HRESULT = HRESULT::from_constant(0x8034002E); // ERROR_NDIS_INVALID_PORT_STATE

/// The miniport adapter is in low power state.
pub const LOW_POWER_STATE : HRESULT = HRESULT::from_constant(0x8034002F); // ERROR_NDIS_LOW_POWER_STATE

/// This operation requires the miniport adapter to be reinitialized.
pub const REINIT_REQUIRED : HRESULT = HRESULT::from_constant(0x80340030); // ERROR_NDIS_REINIT_REQUIRED

/// There are not enough queues to complete the operation.
pub const NO_QUEUES : HRESULT = HRESULT::from_constant(0x80340031); // ERROR_NDIS_NO_QUEUES

/// The wireless local area network interface is in auto configuration mode and doesn't support the requested parameter change operation.
pub const DOT11_AUTO_CONFIG_ENABLED : HRESULT = HRESULT::from_constant(0x80342000); // ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED

/// The wireless local area network interface is busy and can not perform the requested operation.
pub const DOT11_MEDIA_IN_USE : HRESULT = HRESULT::from_constant(0x80342001); // ERROR_NDIS_DOT11_MEDIA_IN_USE

/// The wireless local area network interface is powered down and doesn't support the requested operation.
pub const DOT11_POWER_STATE_INVALID : HRESULT = HRESULT::from_constant(0x80342002); // ERROR_NDIS_DOT11_POWER_STATE_INVALID

/// The list of wake on LAN patterns is full.
pub const PM_WOL_PATTERN_LIST_FULL : HRESULT = HRESULT::from_constant(0x80342003); // ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL

/// The list of low power protocol offloads is full.
pub const PM_PROTOCOL_OFFLOAD_LIST_FULL : HRESULT = HRESULT::from_constant(0x80342004); // ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL

/// The wireless local area network interface cannot start an AP on the specified channel right now.
pub const DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE : HRESULT = HRESULT::from_constant(0x80342005); // ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE

/// The wireless local area network interface cannot start an AP on the specified band right now.
pub const DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE : HRESULT = HRESULT::from_constant(0x80342006); // ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE

/// The wireless local area network interface cannot start an AP on this channel due to regulatory reasons.
pub const DOT11_AP_CHANNEL_NOT_ALLOWED : HRESULT = HRESULT::from_constant(0x80342007); // ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED

/// The wireless local area network interface cannot start an AP on this band due to regulatory reasons.
pub const DOT11_AP_BAND_NOT_ALLOWED : HRESULT = HRESULT::from_constant(0x80342008); // ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED

/// The request will be completed later by NDIS status indication.
pub const INDICATION_REQUIRED : HRESULT = HRESULT::from_constant(0x00340001); // ERROR_NDIS_INDICATION_REQUIRED

/// The TCP connection is not offloadable because of a local policy setting.
pub const OFFLOAD_POLICY : HRESULT = HRESULT::from_constant(0xC034100F); // ERROR_NDIS_OFFLOAD_POLICY

/// The TCP connection is not offloadable by the Chimney Offload target.
pub const OFFLOAD_CONNECTION_REJECTED : HRESULT = HRESULT::from_constant(0xC0341012); // ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED

/// The IP Path object is not in an offloadable state.
pub const OFFLOAD_PATH_REJECTED : HRESULT = HRESULT::from_constant(0xC0341013); // ERROR_NDIS_OFFLOAD_PATH_REJECTED
