// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The string binding is invalid.
pub const S_INVALID_STRING_BINDING : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1700); // RPC_S_INVALID_STRING_BINDING

/// The binding handle is not the correct type.
pub const S_WRONG_KIND_OF_BINDING : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1701); // RPC_S_WRONG_KIND_OF_BINDING

/// The binding handle is invalid.
pub const S_INVALID_BINDING : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1702); // RPC_S_INVALID_BINDING

/// The RPC protocol sequence is not supported.
pub const S_PROTSEQ_NOT_SUPPORTED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1703); // RPC_S_PROTSEQ_NOT_SUPPORTED

/// The RPC protocol sequence is invalid.
pub const S_INVALID_RPC_PROTSEQ : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1704); // RPC_S_INVALID_RPC_PROTSEQ

/// The string universal unique identifier (UUID) is invalid.
pub const S_INVALID_STRING_UUID : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1705); // RPC_S_INVALID_STRING_UUID

/// The endpoint format is invalid.
pub const S_INVALID_ENDPOINT_FORMAT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1706); // RPC_S_INVALID_ENDPOINT_FORMAT

/// The network address is invalid.
pub const S_INVALID_NET_ADDR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1707); // RPC_S_INVALID_NET_ADDR

/// No endpoint was found.
pub const S_NO_ENDPOINT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1708); // RPC_S_NO_ENDPOINT_FOUND

/// The timeout value is invalid.
pub const S_INVALID_TIMEOUT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1709); // RPC_S_INVALID_TIMEOUT

/// The object universal unique identifier (UUID) was not found.
pub const S_OBJECT_NOT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1710); // RPC_S_OBJECT_NOT_FOUND

/// The object universal unique identifier (UUID) has already been registered.
pub const S_ALREADY_REGISTERED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1711); // RPC_S_ALREADY_REGISTERED

/// The type universal unique identifier (UUID) has already been registered.
pub const S_TYPE_ALREADY_REGISTERED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1712); // RPC_S_TYPE_ALREADY_REGISTERED

/// The RPC server is already listening.
pub const S_ALREADY_LISTENING : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1713); // RPC_S_ALREADY_LISTENING

/// No protocol sequences have been registered.
pub const S_NO_PROTSEQS_REGISTERED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1714); // RPC_S_NO_PROTSEQS_REGISTERED

/// The RPC server is not listening.
pub const S_NOT_LISTENING : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1715); // RPC_S_NOT_LISTENING

/// The manager type is unknown.
pub const S_UNKNOWN_MGR_TYPE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1716); // RPC_S_UNKNOWN_MGR_TYPE

/// The interface is unknown.
pub const S_UNKNOWN_IF : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1717); // RPC_S_UNKNOWN_IF

/// There are no bindings.
pub const S_NO_BINDINGS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1718); // RPC_S_NO_BINDINGS

/// There are no protocol sequences.
pub const S_NO_PROTSEQS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1719); // RPC_S_NO_PROTSEQS

/// The endpoint cannot be created.
pub const S_CANT_CREATE_ENDPOINT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1720); // RPC_S_CANT_CREATE_ENDPOINT

/// Not enough resources are available to complete this operation.
pub const S_OUT_OF_RESOURCES : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1721); // RPC_S_OUT_OF_RESOURCES

/// The RPC server is unavailable.
pub const S_SERVER_UNAVAILABLE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1722); // RPC_S_SERVER_UNAVAILABLE

/// The RPC server is too busy to complete this operation.
pub const S_SERVER_TOO_BUSY : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1723); // RPC_S_SERVER_TOO_BUSY

/// The network options are invalid.
pub const S_INVALID_NETWORK_OPTIONS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1724); // RPC_S_INVALID_NETWORK_OPTIONS

/// There are no remote procedure calls active on this thread.
pub const S_NO_CALL_ACTIVE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1725); // RPC_S_NO_CALL_ACTIVE

/// The remote procedure call failed.
pub const S_CALL_FAILED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1726); // RPC_S_CALL_FAILED

/// The remote procedure call failed and did not execute.
pub const S_CALL_FAILED_DNE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1727); // RPC_S_CALL_FAILED_DNE

/// A remote procedure call (RPC) protocol error occurred.
pub const S_PROTOCOL_ERROR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1728); // RPC_S_PROTOCOL_ERROR

/// Access to the HTTP proxy is denied.
pub const S_PROXY_ACCESS_DENIED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1729); // RPC_S_PROXY_ACCESS_DENIED

/// The transfer syntax is not supported by the RPC server.
pub const S_UNSUPPORTED_TRANS_SYN : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1730); // RPC_S_UNSUPPORTED_TRANS_SYN

/// The universal unique identifier (UUID) type is not supported.
pub const S_UNSUPPORTED_TYPE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1732); // RPC_S_UNSUPPORTED_TYPE

/// The tag is invalid.
pub const S_INVALID_TAG : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1733); // RPC_S_INVALID_TAG

/// The array bounds are invalid.
pub const S_INVALID_BOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1734); // RPC_S_INVALID_BOUND

/// The binding does not contain an entry name.
pub const S_NO_ENTRY_NAME : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1735); // RPC_S_NO_ENTRY_NAME

/// The name syntax is invalid.
pub const S_INVALID_NAME_SYNTAX : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1736); // RPC_S_INVALID_NAME_SYNTAX

/// The name syntax is not supported.
pub const S_UNSUPPORTED_NAME_SYNTAX : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1737); // RPC_S_UNSUPPORTED_NAME_SYNTAX

/// No network address is available to use to construct a universal unique identifier (UUID).
pub const S_UUID_NO_ADDRESS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1739); // RPC_S_UUID_NO_ADDRESS

/// The endpoint is a duplicate.
pub const S_DUPLICATE_ENDPOINT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1740); // RPC_S_DUPLICATE_ENDPOINT

/// The authentication type is unknown.
pub const S_UNKNOWN_AUTHN_TYPE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1741); // RPC_S_UNKNOWN_AUTHN_TYPE

/// The maximum number of calls is too small.
pub const S_MAX_CALLS_TOO_SMALL : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1742); // RPC_S_MAX_CALLS_TOO_SMALL

/// The string is too long.
pub const S_STRING_TOO_LONG : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1743); // RPC_S_STRING_TOO_LONG

/// The RPC protocol sequence was not found.
pub const S_PROTSEQ_NOT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1744); // RPC_S_PROTSEQ_NOT_FOUND

/// The procedure number is out of range.
pub const S_PROCNUM_OUT_OF_RANGE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1745); // RPC_S_PROCNUM_OUT_OF_RANGE

/// The binding does not contain any authentication information.
pub const S_BINDING_HAS_NO_AUTH : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1746); // RPC_S_BINDING_HAS_NO_AUTH

/// The authentication service is unknown.
pub const S_UNKNOWN_AUTHN_SERVICE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1747); // RPC_S_UNKNOWN_AUTHN_SERVICE

/// The authentication level is unknown.
pub const S_UNKNOWN_AUTHN_LEVEL : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1748); // RPC_S_UNKNOWN_AUTHN_LEVEL

/// The security context is invalid.
pub const S_INVALID_AUTH_IDENTITY : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1749); // RPC_S_INVALID_AUTH_IDENTITY

/// The authorization service is unknown.
pub const S_UNKNOWN_AUTHZ_SERVICE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1750); // RPC_S_UNKNOWN_AUTHZ_SERVICE

/// No interfaces have been exported.
pub const S_NOTHING_TO_EXPORT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1754); // RPC_S_NOTHING_TO_EXPORT

/// The entry name is incomplete.
pub const S_INCOMPLETE_NAME : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1755); // RPC_S_INCOMPLETE_NAME

/// The version option is invalid.
pub const S_INVALID_VERS_OPTION : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1756); // RPC_S_INVALID_VERS_OPTION

/// There are no more members.
pub const S_NO_MORE_MEMBERS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1757); // RPC_S_NO_MORE_MEMBERS

/// There is nothing to unexport.
pub const S_NOT_ALL_OBJS_UNEXPORTED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1758); // RPC_S_NOT_ALL_OBJS_UNEXPORTED

/// The interface was not found.
pub const S_INTERFACE_NOT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1759); // RPC_S_INTERFACE_NOT_FOUND

/// The entry already exists.
pub const S_ENTRY_ALREADY_EXISTS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1760); // RPC_S_ENTRY_ALREADY_EXISTS

/// The entry is not found.
pub const S_ENTRY_NOT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1761); // RPC_S_ENTRY_NOT_FOUND

/// The name service is unavailable.
pub const S_NAME_SERVICE_UNAVAILABLE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1762); // RPC_S_NAME_SERVICE_UNAVAILABLE

/// The network address family is invalid.
pub const S_INVALID_NAF_ID : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1763); // RPC_S_INVALID_NAF_ID

/// The requested operation is not supported.
pub const S_CANNOT_SUPPORT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1764); // RPC_S_CANNOT_SUPPORT

/// No security context is available to allow impersonation.
pub const S_NO_CONTEXT_AVAILABLE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1765); // RPC_S_NO_CONTEXT_AVAILABLE

/// An internal error occurred in a remote procedure call (RPC).
pub const S_INTERNAL_ERROR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1766); // RPC_S_INTERNAL_ERROR

/// The RPC server attempted an integer division by zero.
pub const S_ZERO_DIVIDE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1767); // RPC_S_ZERO_DIVIDE

/// An addressing error occurred in the RPC server.
pub const S_ADDRESS_ERROR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1768); // RPC_S_ADDRESS_ERROR

/// A floating-point operation at the RPC server caused a division by zero.
pub const S_FP_DIV_ZERO : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1769); // RPC_S_FP_DIV_ZERO

/// A floating-point underflow occurred at the RPC server.
pub const S_FP_UNDERFLOW : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1770); // RPC_S_FP_UNDERFLOW

/// A floating-point overflow occurred at the RPC server.
pub const S_FP_OVERFLOW : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1771); // RPC_S_FP_OVERFLOW

/// A remote procedure call is already in progress for this thread.
pub const S_CALL_IN_PROGRESS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1791); // RPC_S_CALL_IN_PROGRESS

/// There are no more bindings.
pub const S_NO_MORE_BINDINGS : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1806); // RPC_S_NO_MORE_BINDINGS

/// No interfaces have been registered.
pub const S_NO_INTERFACES : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1817); // RPC_S_NO_INTERFACES

/// The remote procedure call was cancelled.
pub const S_CALL_CANCELLED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1818); // RPC_S_CALL_CANCELLED

/// The binding handle does not contain all required information.
pub const S_BINDING_INCOMPLETE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1819); // RPC_S_BINDING_INCOMPLETE

/// A communications failure occurred during a remote procedure call.
pub const S_COMM_FAILURE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1820); // RPC_S_COMM_FAILURE

/// The requested authentication level is not supported.
pub const S_UNSUPPORTED_AUTHN_LEVEL : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1821); // RPC_S_UNSUPPORTED_AUTHN_LEVEL

/// No principal name registered.
pub const S_NO_PRINC_NAME : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1822); // RPC_S_NO_PRINC_NAME

/// The error specified is not a valid Windows RPC error code.
pub const S_NOT_RPC_ERROR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1823); // RPC_S_NOT_RPC_ERROR

/// A UUID that is valid only on this computer has been allocated.
pub const S_UUID_LOCAL_ONLY : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1824); // RPC_S_UUID_LOCAL_ONLY

/// A security package specific error occurred.
pub const S_SEC_PKG_ERROR : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1825); // RPC_S_SEC_PKG_ERROR

/// Thread is not canceled.
pub const S_NOT_CANCELLED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1826); // RPC_S_NOT_CANCELLED

/// HTTP proxy server rejected the connection because the cookie authentication failed.
pub const S_COOKIE_AUTH_FAILED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1833); // RPC_S_COOKIE_AUTH_FAILED

/// The RPC server is suspended, and could not be resumed for this request. The call did not execute.
pub const S_DO_NOT_DISTURB : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1834); // RPC_S_DO_NOT_DISTURB

/// The RPC call contains too many handles to be transmitted in a single request.
pub const S_SYSTEM_HANDLE_COUNT_EXCEEDED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1835); // RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED

/// The RPC call contains a handle that differs from the declared handle type.
pub const S_SYSTEM_HANDLE_TYPE_MISMATCH : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1836); // RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH

/// The group member was not found.
pub const S_GROUP_MEMBER_NOT_FOUND : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1898); // RPC_S_GROUP_MEMBER_NOT_FOUND

/// The object universal unique identifier (UUID) is the nil UUID.
pub const S_INVALID_OBJECT : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1900); // RPC_S_INVALID_OBJECT

/// Some data remains to be sent in the request buffer.
pub const S_SEND_INCOMPLETE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1913); // RPC_S_SEND_INCOMPLETE

/// Invalid asynchronous remote procedure call handle.
pub const S_INVALID_ASYNC_HANDLE : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1914); // RPC_S_INVALID_ASYNC_HANDLE

/// Invalid asynchronous RPC call handle for this operation.
pub const S_INVALID_ASYNC_CALL : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1915); // RPC_S_INVALID_ASYNC_CALL

/// The entry is not of the expected type.
pub const S_ENTRY_TYPE_MISMATCH : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1922); // RPC_S_ENTRY_TYPE_MISMATCH

/// Not all object UUIDs could be exported to the specified entry.
pub const S_NOT_ALL_OBJS_EXPORTED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1923); // RPC_S_NOT_ALL_OBJS_EXPORTED

/// Interface could not be exported to the specified entry.
pub const S_INTERFACE_NOT_EXPORTED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1924); // RPC_S_INTERFACE_NOT_EXPORTED

/// The specified profile entry could not be added.
pub const S_PROFILE_NOT_ADDED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1925); // RPC_S_PROFILE_NOT_ADDED

/// The specified profile element could not be added.
pub const S_PRF_ELT_NOT_ADDED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1926); // RPC_S_PRF_ELT_NOT_ADDED

/// The specified profile element could not be removed.
pub const S_PRF_ELT_NOT_REMOVED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1927); // RPC_S_PRF_ELT_NOT_REMOVED

/// The group element could not be added.
pub const S_GRP_ELT_NOT_ADDED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1928); // RPC_S_GRP_ELT_NOT_ADDED

/// The group element could not be removed.
pub const S_GRP_ELT_NOT_REMOVED : SuccessCodeMicrosoft = SuccessCodeMicrosoft::from_constant(1929); // RPC_S_GRP_ELT_NOT_REMOVED

/// Call was rejected by callee.
pub const E_CALL_REJECTED : ErrorHResult = ErrorHResult::from_constant(0x80010001); // RPC_E_CALL_REJECTED

/// Call was canceled by the message filter.
pub const E_CALL_CANCELED : ErrorHResult = ErrorHResult::from_constant(0x80010002); // RPC_E_CALL_CANCELED

/// The caller is dispatching an intertask SendMessage call and cannot call out via PostMessage.
pub const E_CANTPOST_INSENDCALL : ErrorHResult = ErrorHResult::from_constant(0x80010003); // RPC_E_CANTPOST_INSENDCALL

/// The caller is dispatching an asynchronous call and cannot make an outgoing call on behalf of this call.
pub const E_CANTCALLOUT_INASYNCCALL : ErrorHResult = ErrorHResult::from_constant(0x80010004); // RPC_E_CANTCALLOUT_INASYNCCALL

/// It is illegal to call out while inside message filter.
pub const E_CANTCALLOUT_INEXTERNALCALL : ErrorHResult = ErrorHResult::from_constant(0x80010005); // RPC_E_CANTCALLOUT_INEXTERNALCALL

/// The connection terminated or is in a bogus state and cannot be used any more. Other connections are still valid.
pub const E_CONNECTION_TERMINATED : ErrorHResult = ErrorHResult::from_constant(0x80010006); // RPC_E_CONNECTION_TERMINATED

/// The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call may have executed.
pub const E_SERVER_DIED : ErrorHResult = ErrorHResult::from_constant(0x80010007); // RPC_E_SERVER_DIED

/// The caller (client) disappeared while the callee (server) was processing a call.
pub const E_CLIENT_DIED : ErrorHResult = ErrorHResult::from_constant(0x80010008); // RPC_E_CLIENT_DIED

/// The data packet with the marshalled parameter data is incorrect.
pub const E_INVALID_DATAPACKET : ErrorHResult = ErrorHResult::from_constant(0x80010009); // RPC_E_INVALID_DATAPACKET

/// The call was not transmitted properly; the message queue was full and was not emptied after yielding.
pub const E_CANTTRANSMIT_CALL : ErrorHResult = ErrorHResult::from_constant(0x8001000A); // RPC_E_CANTTRANSMIT_CALL

/// The client (caller) cannot marshall the parameter data - low memory, etc.
pub const E_CLIENT_CANTMARSHAL_DATA : ErrorHResult = ErrorHResult::from_constant(0x8001000B); // RPC_E_CLIENT_CANTMARSHAL_DATA

/// The client (caller) cannot unmarshall the return data - low memory, etc.
pub const E_CLIENT_CANTUNMARSHAL_DATA : ErrorHResult = ErrorHResult::from_constant(0x8001000C); // RPC_E_CLIENT_CANTUNMARSHAL_DATA

/// The server (callee) cannot marshall the return data - low memory, etc.
pub const E_SERVER_CANTMARSHAL_DATA : ErrorHResult = ErrorHResult::from_constant(0x8001000D); // RPC_E_SERVER_CANTMARSHAL_DATA

/// The server (callee) cannot unmarshall the parameter data - low memory, etc.
pub const E_SERVER_CANTUNMARSHAL_DATA : ErrorHResult = ErrorHResult::from_constant(0x8001000E); // RPC_E_SERVER_CANTUNMARSHAL_DATA

/// Received data is invalid; could be server or client data.
pub const E_INVALID_DATA : ErrorHResult = ErrorHResult::from_constant(0x8001000F); // RPC_E_INVALID_DATA

/// A particular parameter is invalid and cannot be (un)marshalled.
pub const E_INVALID_PARAMETER : ErrorHResult = ErrorHResult::from_constant(0x80010010); // RPC_E_INVALID_PARAMETER

/// There is no second outgoing call on same channel in DDE conversation.
pub const E_CANTCALLOUT_AGAIN : ErrorHResult = ErrorHResult::from_constant(0x80010011); // RPC_E_CANTCALLOUT_AGAIN

/// The callee (server [not server application]) is not available and disappeared; all connections are invalid. The call did not execute.
pub const E_SERVER_DIED_DNE : ErrorHResult = ErrorHResult::from_constant(0x80010012); // RPC_E_SERVER_DIED_DNE

/// System call failed.
pub const E_SYS_CALL_FAILED : ErrorHResult = ErrorHResult::from_constant(0x80010100); // RPC_E_SYS_CALL_FAILED

/// Could not allocate some required resource (memory, events, ...)
pub const E_OUT_OF_RESOURCES : ErrorHResult = ErrorHResult::from_constant(0x80010101); // RPC_E_OUT_OF_RESOURCES

/// Attempted to make calls on more than one thread in single threaded mode.
pub const E_ATTEMPTED_MULTITHREAD : ErrorHResult = ErrorHResult::from_constant(0x80010102); // RPC_E_ATTEMPTED_MULTITHREAD

/// The requested interface is not registered on the server object.
pub const E_NOT_REGISTERED : ErrorHResult = ErrorHResult::from_constant(0x80010103); // RPC_E_NOT_REGISTERED

/// RPC could not call the server or could not return the results of calling the server.
pub const E_FAULT : ErrorHResult = ErrorHResult::from_constant(0x80010104); // RPC_E_FAULT

/// The server threw an exception.
pub const E_SERVERFAULT : ErrorHResult = ErrorHResult::from_constant(0x80010105); // RPC_E_SERVERFAULT

/// Cannot change thread mode after it is set.
pub const E_CHANGED_MODE : ErrorHResult = ErrorHResult::from_constant(0x80010106); // RPC_E_CHANGED_MODE

/// The method called does not exist on the server.
pub const E_INVALIDMETHOD : ErrorHResult = ErrorHResult::from_constant(0x80010107); // RPC_E_INVALIDMETHOD

/// The object invoked has disconnected from its clients.
pub const E_DISCONNECTED : ErrorHResult = ErrorHResult::from_constant(0x80010108); // RPC_E_DISCONNECTED

/// The object invoked chose not to process the call now. Try again later.
pub const E_RETRY : ErrorHResult = ErrorHResult::from_constant(0x80010109); // RPC_E_RETRY

/// The message filter indicated that the application is busy.
pub const E_SERVERCALL_RETRYLATER : ErrorHResult = ErrorHResult::from_constant(0x8001010A); // RPC_E_SERVERCALL_RETRYLATER

/// The message filter rejected the call.
pub const E_SERVERCALL_REJECTED : ErrorHResult = ErrorHResult::from_constant(0x8001010B); // RPC_E_SERVERCALL_REJECTED

/// A call control interfaces was called with invalid data.
pub const E_INVALID_CALLDATA : ErrorHResult = ErrorHResult::from_constant(0x8001010C); // RPC_E_INVALID_CALLDATA

/// An outgoing call cannot be made since the application is dispatching an input-synchronous call.
pub const E_CANTCALLOUT_ININPUTSYNCCALL : ErrorHResult = ErrorHResult::from_constant(0x8001010D); // RPC_E_CANTCALLOUT_ININPUTSYNCCALL

/// The application called an interface that was marshalled for a different thread.
pub const E_WRONG_THREAD : ErrorHResult = ErrorHResult::from_constant(0x8001010E); // RPC_E_WRONG_THREAD

/// CoInitialize has not been called on the current thread.
pub const E_THREAD_NOT_INIT : ErrorHResult = ErrorHResult::from_constant(0x8001010F); // RPC_E_THREAD_NOT_INIT

/// The version of OLE on the client and server machines does not match.
pub const E_VERSION_MISMATCH : ErrorHResult = ErrorHResult::from_constant(0x80010110); // RPC_E_VERSION_MISMATCH

/// OLE received a packet with an invalid header.
pub const E_INVALID_HEADER : ErrorHResult = ErrorHResult::from_constant(0x80010111); // RPC_E_INVALID_HEADER

/// OLE received a packet with an invalid extension.
pub const E_INVALID_EXTENSION : ErrorHResult = ErrorHResult::from_constant(0x80010112); // RPC_E_INVALID_EXTENSION

/// The requested object or interface does not exist.
pub const E_INVALID_IPID : ErrorHResult = ErrorHResult::from_constant(0x80010113); // RPC_E_INVALID_IPID

/// The requested object does not exist.
pub const E_INVALID_OBJECT : ErrorHResult = ErrorHResult::from_constant(0x80010114); // RPC_E_INVALID_OBJECT

/// OLE has sent a request and is waiting for a reply.
pub const S_CALLPENDING : ErrorHResult = ErrorHResult::from_constant(0x80010115); // RPC_S_CALLPENDING

/// OLE is waiting before retrying a request.
pub const S_WAITONTIMER : ErrorHResult = ErrorHResult::from_constant(0x80010116); // RPC_S_WAITONTIMER

/// Call context cannot be accessed after call completed.
pub const E_CALL_COMPLETE : ErrorHResult = ErrorHResult::from_constant(0x80010117); // RPC_E_CALL_COMPLETE

/// Impersonate on unsecure calls is not supported.
pub const E_UNSECURE_CALL : ErrorHResult = ErrorHResult::from_constant(0x80010118); // RPC_E_UNSECURE_CALL

/// Security must be initialized before any interfaces are marshalled or unmarshalled. It cannot be changed once initialized.
pub const E_TOO_LATE : ErrorHResult = ErrorHResult::from_constant(0x80010119); // RPC_E_TOO_LATE

/// No security packages are installed on this machine or the user is not logged on or there are no compatible security packages between the client and server.
pub const E_NO_GOOD_SECURITY_PACKAGES : ErrorHResult = ErrorHResult::from_constant(0x8001011A); // RPC_E_NO_GOOD_SECURITY_PACKAGES

/// Access is denied.
pub const E_ACCESS_DENIED : ErrorHResult = ErrorHResult::from_constant(0x8001011B); // RPC_E_ACCESS_DENIED

/// Remote calls are not allowed for this process.
pub const E_REMOTE_DISABLED : ErrorHResult = ErrorHResult::from_constant(0x8001011C); // RPC_E_REMOTE_DISABLED

/// The marshaled interface data packet (OBJREF) has an invalid or unknown format.
pub const E_INVALID_OBJREF : ErrorHResult = ErrorHResult::from_constant(0x8001011D); // RPC_E_INVALID_OBJREF

/// No context is associated with this call. This happens for some custom marshalled calls and on the client side of the call.
pub const E_NO_CONTEXT : ErrorHResult = ErrorHResult::from_constant(0x8001011E); // RPC_E_NO_CONTEXT

/// This operation returned because the timeout period expired.
pub const E_TIMEOUT : ErrorHResult = ErrorHResult::from_constant(0x8001011F); // RPC_E_TIMEOUT

/// There are no synchronize objects to wait on.
pub const E_NO_SYNC : ErrorHResult = ErrorHResult::from_constant(0x80010120); // RPC_E_NO_SYNC

/// Full subject issuer chain SSL principal name expected from the server.
pub const E_FULLSIC_REQUIRED : ErrorHResult = ErrorHResult::from_constant(0x80010121); // RPC_E_FULLSIC_REQUIRED

/// Principal name is not a valid MSSTD name.
pub const E_INVALID_STD_NAME : ErrorHResult = ErrorHResult::from_constant(0x80010122); // RPC_E_INVALID_STD_NAME

/// An internal error occurred.
pub const E_UNEXPECTED : ErrorHResult = ErrorHResult::from_constant(0x8001FFFF); // RPC_E_UNEXPECTED
