// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// Thread local storage failure
pub const E_INIT_TLS : HRESULT = HRESULT::from_constant(0x80004006); // CO_E_INIT_TLS

/// Get shared memory allocator failure
pub const E_INIT_SHARED_ALLOCATOR : HRESULT = HRESULT::from_constant(0x80004007); // CO_E_INIT_SHARED_ALLOCATOR

/// Get memory allocator failure
pub const E_INIT_MEMORY_ALLOCATOR : HRESULT = HRESULT::from_constant(0x80004008); // CO_E_INIT_MEMORY_ALLOCATOR

/// Unable to initialize class cache
pub const E_INIT_CLASS_CACHE : HRESULT = HRESULT::from_constant(0x80004009); // CO_E_INIT_CLASS_CACHE

/// Unable to initialize RPC services
pub const E_INIT_RPC_CHANNEL : HRESULT = HRESULT::from_constant(0x8000400A); // CO_E_INIT_RPC_CHANNEL

/// Cannot set thread local storage channel control
pub const E_INIT_TLS_SET_CHANNEL_CONTROL : HRESULT = HRESULT::from_constant(0x8000400B); // CO_E_INIT_TLS_SET_CHANNEL_CONTROL

/// Could not allocate thread local storage channel control
pub const E_INIT_TLS_CHANNEL_CONTROL : HRESULT = HRESULT::from_constant(0x8000400C); // CO_E_INIT_TLS_CHANNEL_CONTROL

/// The user supplied memory allocator is unacceptable
pub const E_INIT_UNACCEPTED_USER_ALLOCATOR : HRESULT = HRESULT::from_constant(0x8000400D); // CO_E_INIT_UNACCEPTED_USER_ALLOCATOR

/// The OLE service mutex already exists
pub const E_INIT_SCM_MUTEX_EXISTS : HRESULT = HRESULT::from_constant(0x8000400E); // CO_E_INIT_SCM_MUTEX_EXISTS

/// The OLE service file mapping already exists
pub const E_INIT_SCM_FILE_MAPPING_EXISTS : HRESULT = HRESULT::from_constant(0x8000400F); // CO_E_INIT_SCM_FILE_MAPPING_EXISTS

/// Unable to map view of file for OLE service
pub const E_INIT_SCM_MAP_VIEW_OF_FILE : HRESULT = HRESULT::from_constant(0x80004010); // CO_E_INIT_SCM_MAP_VIEW_OF_FILE

/// Failure attempting to launch OLE service
pub const E_INIT_SCM_EXEC_FAILURE : HRESULT = HRESULT::from_constant(0x80004011); // CO_E_INIT_SCM_EXEC_FAILURE

/// There was an attempt to call CoInitialize a second time while single threaded
pub const E_INIT_ONLY_SINGLE_THREADED : HRESULT = HRESULT::from_constant(0x80004012); // CO_E_INIT_ONLY_SINGLE_THREADED

/// A Remote activation was necessary but was not allowed
pub const E_CANT_REMOTE : HRESULT = HRESULT::from_constant(0x80004013); // CO_E_CANT_REMOTE

/// A Remote activation was necessary but the server name provided was invalid
pub const E_BAD_SERVER_NAME : HRESULT = HRESULT::from_constant(0x80004014); // CO_E_BAD_SERVER_NAME

/// The class is configured to run as a security id different from the caller
pub const E_WRONG_SERVER_IDENTITY : HRESULT = HRESULT::from_constant(0x80004015); // CO_E_WRONG_SERVER_IDENTITY

/// Use of Ole1 services requiring DDE windows is disabled
pub const E_OLE1DDE_DISABLED : HRESULT = HRESULT::from_constant(0x80004016); // CO_E_OLE1DDE_DISABLED

/// A RunAs specification must be <domain name>\<user name> or simply <user name>
pub const E_RUNAS_SYNTAX : HRESULT = HRESULT::from_constant(0x80004017); // CO_E_RUNAS_SYNTAX

/// The server process could not be started. The pathname may be incorrect.
pub const E_CREATEPROCESS_FAILURE : HRESULT = HRESULT::from_constant(0x80004018); // CO_E_CREATEPROCESS_FAILURE

/// The server process could not be started as the configured identity. The pathname may be incorrect or unavailable.
pub const E_RUNAS_CREATEPROCESS_FAILURE : HRESULT = HRESULT::from_constant(0x80004019); // CO_E_RUNAS_CREATEPROCESS_FAILURE

/// The server process could not be started because the configured identity is incorrect. Check the username and password.
pub const E_RUNAS_LOGON_FAILURE : HRESULT = HRESULT::from_constant(0x8000401A); // CO_E_RUNAS_LOGON_FAILURE

/// The client is not allowed to launch this server.
pub const E_LAUNCH_PERMSSION_DENIED : HRESULT = HRESULT::from_constant(0x8000401B); // CO_E_LAUNCH_PERMSSION_DENIED

/// The service providing this server could not be started.
pub const E_START_SERVICE_FAILURE : HRESULT = HRESULT::from_constant(0x8000401C); // CO_E_START_SERVICE_FAILURE

/// This computer was unable to communicate with the computer providing the server.
pub const E_REMOTE_COMMUNICATION_FAILURE : HRESULT = HRESULT::from_constant(0x8000401D); // CO_E_REMOTE_COMMUNICATION_FAILURE

/// The server did not respond after being launched.
pub const E_SERVER_START_TIMEOUT : HRESULT = HRESULT::from_constant(0x8000401E); // CO_E_SERVER_START_TIMEOUT

/// The registration information for this server is inconsistent or incomplete.
pub const E_CLSREG_INCONSISTENT : HRESULT = HRESULT::from_constant(0x8000401F); // CO_E_CLSREG_INCONSISTENT

/// The registration information for this interface is inconsistent or incomplete.
pub const E_IIDREG_INCONSISTENT : HRESULT = HRESULT::from_constant(0x80004020); // CO_E_IIDREG_INCONSISTENT

/// The operation attempted is not supported.
pub const E_NOT_SUPPORTED : HRESULT = HRESULT::from_constant(0x80004021); // CO_E_NOT_SUPPORTED

/// A dll must be loaded.
pub const E_RELOAD_DLL : HRESULT = HRESULT::from_constant(0x80004022); // CO_E_RELOAD_DLL

/// A Microsoft Software Installer error was encountered.
pub const E_MSI_ERROR : HRESULT = HRESULT::from_constant(0x80004023); // CO_E_MSI_ERROR

/// The specified activation could not occur in the client context as specified.
pub const E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT : HRESULT = HRESULT::from_constant(0x80004024); // CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT

/// Activations on the server are paused.
pub const E_SERVER_PAUSED : HRESULT = HRESULT::from_constant(0x80004025); // CO_E_SERVER_PAUSED

/// Activations on the server are not paused.
pub const E_SERVER_NOT_PAUSED : HRESULT = HRESULT::from_constant(0x80004026); // CO_E_SERVER_NOT_PAUSED

/// The component or application containing the component has been disabled.
pub const E_CLASS_DISABLED : HRESULT = HRESULT::from_constant(0x80004027); // CO_E_CLASS_DISABLED

/// The common language runtime is not available
pub const E_CLRNOTAVAILABLE : HRESULT = HRESULT::from_constant(0x80004028); // CO_E_CLRNOTAVAILABLE

/// The thread-pool rejected the submitted asynchronous work.
pub const E_ASYNC_WORK_REJECTED : HRESULT = HRESULT::from_constant(0x80004029); // CO_E_ASYNC_WORK_REJECTED

/// The server started, but did not finish initializing in a timely fashion.
pub const E_SERVER_INIT_TIMEOUT : HRESULT = HRESULT::from_constant(0x8000402A); // CO_E_SERVER_INIT_TIMEOUT

/// Unable to complete the call since there is no COM+ security context inside IObjectControl.Activate.
pub const E_NO_SECCTX_IN_ACTIVATE : HRESULT = HRESULT::from_constant(0x8000402B); // CO_E_NO_SECCTX_IN_ACTIVATE

/// The provided tracker configuration is invalid
pub const E_TRACKER_CONFIG : HRESULT = HRESULT::from_constant(0x80004030); // CO_E_TRACKER_CONFIG

/// The provided thread pool configuration is invalid
pub const E_THREADPOOL_CONFIG : HRESULT = HRESULT::from_constant(0x80004031); // CO_E_THREADPOOL_CONFIG

/// The provided side-by-side configuration is invalid
pub const E_SXS_CONFIG : HRESULT = HRESULT::from_constant(0x80004032); // CO_E_SXS_CONFIG

/// The server principal name (SPN) obtained during security negotiation is malformed.
pub const E_MALFORMED_SPN : HRESULT = HRESULT::from_constant(0x80004033); // CO_E_MALFORMED_SPN

/// The caller failed to revoke a per-apartment registration before apartment shutdown.
pub const E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN : HRESULT = HRESULT::from_constant(0x80004034); // CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN

/// The object has been rundown by the stub manager while there are external clients.
pub const E_PREMATURE_STUB_RUNDOWN : HRESULT = HRESULT::from_constant(0x80004035); // CO_E_PREMATURE_STUB_RUNDOWN

/// CoInitialize has not been called.
pub const E_NOTINITIALIZED : HRESULT = HRESULT::from_constant(0x800401F0); // CO_E_NOTINITIALIZED

/// CoInitialize has already been called.
pub const E_ALREADYINITIALIZED : HRESULT = HRESULT::from_constant(0x800401F1); // CO_E_ALREADYINITIALIZED

/// Class of object cannot be determined
pub const E_CANTDETERMINECLASS : HRESULT = HRESULT::from_constant(0x800401F2); // CO_E_CANTDETERMINECLASS

/// Invalid class string
pub const E_CLASSSTRING : HRESULT = HRESULT::from_constant(0x800401F3); // CO_E_CLASSSTRING

/// Invalid interface string
pub const E_IIDSTRING : HRESULT = HRESULT::from_constant(0x800401F4); // CO_E_IIDSTRING

/// Application not found
pub const E_APPNOTFOUND : HRESULT = HRESULT::from_constant(0x800401F5); // CO_E_APPNOTFOUND

/// Application cannot be run more than once
pub const E_APPSINGLEUSE : HRESULT = HRESULT::from_constant(0x800401F6); // CO_E_APPSINGLEUSE

/// Some error in application program
pub const E_ERRORINAPP : HRESULT = HRESULT::from_constant(0x800401F7); // CO_E_ERRORINAPP

/// DLL for class not found
pub const E_DLLNOTFOUND : HRESULT = HRESULT::from_constant(0x800401F8); // CO_E_DLLNOTFOUND

/// Error in the DLL
pub const E_ERRORINDLL : HRESULT = HRESULT::from_constant(0x800401F9); // CO_E_ERRORINDLL

/// Wrong OS or OS version for application
pub const E_WRONGOSFORAPP : HRESULT = HRESULT::from_constant(0x800401FA); // CO_E_WRONGOSFORAPP

/// Object is not registered
pub const E_OBJNOTREG : HRESULT = HRESULT::from_constant(0x800401FB); // CO_E_OBJNOTREG

/// Object is already registered
pub const E_OBJISREG : HRESULT = HRESULT::from_constant(0x800401FC); // CO_E_OBJISREG

/// Object is not connected to server
pub const E_OBJNOTCONNECTED : HRESULT = HRESULT::from_constant(0x800401FD); // CO_E_OBJNOTCONNECTED

/// Application was launched but it didn't register a class factory
pub const E_APPDIDNTREG : HRESULT = HRESULT::from_constant(0x800401FE); // CO_E_APPDIDNTREG

/// Object has been released
pub const E_RELEASED : HRESULT = HRESULT::from_constant(0x800401FF); // CO_E_RELEASED

/// An unexpected error occurred during COM+ Activation.
pub const E_ACTIVATIONFAILED : HRESULT = HRESULT::from_constant(0x8004E021); // CO_E_ACTIVATIONFAILED

/// COM+ Activation failed. Check the event log for more information
pub const E_ACTIVATIONFAILED_EVENTLOGGED : HRESULT = HRESULT::from_constant(0x8004E022); // CO_E_ACTIVATIONFAILED_EVENTLOGGED

/// COM+ Activation failed due to a catalog or configuration error.
pub const E_ACTIVATIONFAILED_CATALOGERROR : HRESULT = HRESULT::from_constant(0x8004E023); // CO_E_ACTIVATIONFAILED_CATALOGERROR

/// COM+ activation failed because the activation could not be completed in the specified amount of time.
pub const E_ACTIVATIONFAILED_TIMEOUT : HRESULT = HRESULT::from_constant(0x8004E024); // CO_E_ACTIVATIONFAILED_TIMEOUT

/// COM+ Activation failed because an initialization function failed. Check the event log for more information.
pub const E_INITIALIZATIONFAILED : HRESULT = HRESULT::from_constant(0x8004E025); // CO_E_INITIALIZATIONFAILED

/// The components threading model has changed after install into a COM+ Application. Please re-install component.
pub const E_THREADINGMODEL_CHANGED : HRESULT = HRESULT::from_constant(0x8004E028); // CO_E_THREADINGMODEL_CHANGED

/// IIS intrinsics not available. Start your work with IIS.
pub const E_NOIISINTRINSICS : HRESULT = HRESULT::from_constant(0x8004E029); // CO_E_NOIISINTRINSICS

/// An attempt to write a cookie failed.
pub const E_NOCOOKIES : HRESULT = HRESULT::from_constant(0x8004E02A); // CO_E_NOCOOKIES

/// An attempt to use a database generated a database specific error.
pub const E_DBERROR : HRESULT = HRESULT::from_constant(0x8004E02B); // CO_E_DBERROR

/// The COM+ component you created must use object pooling to work.
pub const E_NOTPOOLED : HRESULT = HRESULT::from_constant(0x8004E02C); // CO_E_NOTPOOLED

/// The COM+ component you created must use object construction to work correctly.
pub const E_NOTCONSTRUCTED : HRESULT = HRESULT::from_constant(0x8004E02D); // CO_E_NOTCONSTRUCTED

/// The COM+ component requires synchronization, and it is not configured for it.
pub const E_NOSYNCHRONIZATION : HRESULT = HRESULT::from_constant(0x8004E02E); // CO_E_NOSYNCHRONIZATION

/// The TxIsolation Level property for the COM+ component being created is stronger than the TxIsolationLevel for the "root" component for the transaction. The creation failed.
pub const E_ISOLEVELMISMATCH : HRESULT = HRESULT::from_constant(0x8004E02F); // CO_E_ISOLEVELMISMATCH

/// The component attempted to make a cross-context call between invocations of EnterTransactionScopeand ExitTransactionScope. This is not allowed. Cross-context calls cannot be made while inside of a transaction scope.
pub const E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED : HRESULT = HRESULT::from_constant(0x8004E030); // CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED

/// The component made a call to EnterTransactionScope, but did not make a corresponding call to ExitTransactionScope before returning.
pub const E_EXIT_TRANSACTION_SCOPE_NOT_CALLED : HRESULT = HRESULT::from_constant(0x8004E031); // CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED

/// Attempt to create a class object failed
pub const E_CLASS_CREATE_FAILED : HRESULT = HRESULT::from_constant(0x80080001); // CO_E_CLASS_CREATE_FAILED

/// OLE service could not bind object
pub const E_SCM_ERROR : HRESULT = HRESULT::from_constant(0x80080002); // CO_E_SCM_ERROR

/// RPC communication failed with OLE service
pub const E_SCM_RPC_FAILURE : HRESULT = HRESULT::from_constant(0x80080003); // CO_E_SCM_RPC_FAILURE

/// Bad path to object
pub const E_BAD_PATH : HRESULT = HRESULT::from_constant(0x80080004); // CO_E_BAD_PATH

/// Server execution failed
pub const E_SERVER_EXEC_FAILURE : HRESULT = HRESULT::from_constant(0x80080005); // CO_E_SERVER_EXEC_FAILURE

/// OLE service could not communicate with the object server
pub const E_OBJSRV_RPC_FAILURE : HRESULT = HRESULT::from_constant(0x80080006); // CO_E_OBJSRV_RPC_FAILURE

/// Object server is stopping when OLE service contacts it
pub const E_SERVER_STOPPING : HRESULT = HRESULT::from_constant(0x80080008); // CO_E_SERVER_STOPPING

/// Not all the requested interfaces were available
pub const S_NOTALLINTERFACES : HRESULT = HRESULT::from_constant(0x00080012); // CO_S_NOTALLINTERFACES

/// The specified machine name was not found in the cache.
pub const S_MACHINENAMENOTFOUND : HRESULT = HRESULT::from_constant(0x00080013); // CO_S_MACHINENAMENOTFOUND

/// The activation requires a display name to be present under the CLSID key.
pub const E_MISSING_DISPLAYNAME : HRESULT = HRESULT::from_constant(0x80080015); // CO_E_MISSING_DISPLAYNAME

/// The activation requires that the RunAs value for the application is Activate As Activator.
pub const E_RUNAS_VALUE_MUST_BE_AAA : HRESULT = HRESULT::from_constant(0x80080016); // CO_E_RUNAS_VALUE_MUST_BE_AAA

/// The class is not configured to support Elevated activation.
pub const E_ELEVATION_DISABLED : HRESULT = HRESULT::from_constant(0x80080017); // CO_E_ELEVATION_DISABLED

/// Unable to impersonate DCOM client
pub const E_FAILEDTOIMPERSONATE : HRESULT = HRESULT::from_constant(0x80010123); // CO_E_FAILEDTOIMPERSONATE

/// Unable to obtain server's security context
pub const E_FAILEDTOGETSECCTX : HRESULT = HRESULT::from_constant(0x80010124); // CO_E_FAILEDTOGETSECCTX

/// Unable to open the access token of the current thread
pub const E_FAILEDTOOPENTHREADTOKEN : HRESULT = HRESULT::from_constant(0x80010125); // CO_E_FAILEDTOOPENTHREADTOKEN

/// Unable to obtain user info from an access token
pub const E_FAILEDTOGETTOKENINFO : HRESULT = HRESULT::from_constant(0x80010126); // CO_E_FAILEDTOGETTOKENINFO

/// The client who called IAccessControl::IsAccessPermitted was not the trustee provided to the method
pub const E_TRUSTEEDOESNTMATCHCLIENT : HRESULT = HRESULT::from_constant(0x80010127); // CO_E_TRUSTEEDOESNTMATCHCLIENT

/// Unable to obtain the client's security blanket
pub const E_FAILEDTOQUERYCLIENTBLANKET : HRESULT = HRESULT::from_constant(0x80010128); // CO_E_FAILEDTOQUERYCLIENTBLANKET

/// Unable to set a discretionary ACL into a security descriptor
pub const E_FAILEDTOSETDACL : HRESULT = HRESULT::from_constant(0x80010129); // CO_E_FAILEDTOSETDACL

/// The system function, AccessCheck, returned false
pub const E_ACCESSCHECKFAILED : HRESULT = HRESULT::from_constant(0x8001012A); // CO_E_ACCESSCHECKFAILED

/// Either NetAccessDel or NetAccessAdd returned an error code.
pub const E_NETACCESSAPIFAILED : HRESULT = HRESULT::from_constant(0x8001012B); // CO_E_NETACCESSAPIFAILED

/// One of the trustee strings provided by the user did not conform to the <Domain>\<Name> syntax and it was not the "\*" string
pub const E_WRONGTRUSTEENAMESYNTAX : HRESULT = HRESULT::from_constant(0x8001012C); // CO_E_WRONGTRUSTEENAMESYNTAX

/// One of the security identifiers provided by the user was invalid
pub const E_INVALIDSID : HRESULT = HRESULT::from_constant(0x8001012D); // CO_E_INVALIDSID

/// Unable to convert a wide character trustee string to a multibyte trustee string
pub const E_CONVERSIONFAILED : HRESULT = HRESULT::from_constant(0x8001012E); // CO_E_CONVERSIONFAILED

/// Unable to find a security identifier that corresponds to a trustee string provided by the user
pub const E_NOMATCHINGSIDFOUND : HRESULT = HRESULT::from_constant(0x8001012F); // CO_E_NOMATCHINGSIDFOUND

/// The system function, LookupAccountSID, failed
pub const E_LOOKUPACCSIDFAILED : HRESULT = HRESULT::from_constant(0x80010130); // CO_E_LOOKUPACCSIDFAILED

/// Unable to find a trustee name that corresponds to a security identifier provided by the user
pub const E_NOMATCHINGNAMEFOUND : HRESULT = HRESULT::from_constant(0x80010131); // CO_E_NOMATCHINGNAMEFOUND

/// The system function, LookupAccountName, failed
pub const E_LOOKUPACCNAMEFAILED : HRESULT = HRESULT::from_constant(0x80010132); // CO_E_LOOKUPACCNAMEFAILED

/// Unable to set or reset a serialization handle
pub const E_SETSERLHNDLFAILED : HRESULT = HRESULT::from_constant(0x80010133); // CO_E_SETSERLHNDLFAILED

/// Unable to obtain the Windows directory
pub const E_FAILEDTOGETWINDIR : HRESULT = HRESULT::from_constant(0x80010134); // CO_E_FAILEDTOGETWINDIR

/// Path too long
pub const E_PATHTOOLONG : HRESULT = HRESULT::from_constant(0x80010135); // CO_E_PATHTOOLONG

/// Unable to generate a uuid.
pub const E_FAILEDTOGENUUID : HRESULT = HRESULT::from_constant(0x80010136); // CO_E_FAILEDTOGENUUID

/// Unable to create file
pub const E_FAILEDTOCREATEFILE : HRESULT = HRESULT::from_constant(0x80010137); // CO_E_FAILEDTOCREATEFILE

/// Unable to close a serialization handle or a file handle.
pub const E_FAILEDTOCLOSEHANDLE : HRESULT = HRESULT::from_constant(0x80010138); // CO_E_FAILEDTOCLOSEHANDLE

/// The number of ACEs in an ACL exceeds the system limit.
pub const E_EXCEEDSYSACLLIMIT : HRESULT = HRESULT::from_constant(0x80010139); // CO_E_EXCEEDSYSACLLIMIT

/// Not all the DENY_ACCESS ACEs are arranged in front of the GRANT_ACCESS ACEs in the stream.
pub const E_ACESINWRONGORDER : HRESULT = HRESULT::from_constant(0x8001013A); // CO_E_ACESINWRONGORDER

/// The version of ACL format in the stream is not supported by this implementation of IAccessControl
pub const E_INCOMPATIBLESTREAMVERSION : HRESULT = HRESULT::from_constant(0x8001013B); // CO_E_INCOMPATIBLESTREAMVERSION

/// Unable to open the access token of the server process
pub const E_FAILEDTOOPENPROCESSTOKEN : HRESULT = HRESULT::from_constant(0x8001013C); // CO_E_FAILEDTOOPENPROCESSTOKEN

/// Unable to decode the ACL in the stream provided by the user
pub const E_DECODEFAILED : HRESULT = HRESULT::from_constant(0x8001013D); // CO_E_DECODEFAILED

/// The COM IAccessControl object is not initialized
pub const E_ACNOTINITIALIZED : HRESULT = HRESULT::from_constant(0x8001013F); // CO_E_ACNOTINITIALIZED

/// Call Cancellation is disabled
pub const E_CANCEL_DISABLED : HRESULT = HRESULT::from_constant(0x80010140); // CO_E_CANCEL_DISABLED
