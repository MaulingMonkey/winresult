// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The request subject name is invalid or too long.
pub const E_BAD_REQUESTSUBJECT : HResultError = HResultError::from_constant(0x80094001); // CERTSRV_E_BAD_REQUESTSUBJECT

/// The request does not exist.
pub const E_NO_REQUEST : HResultError = HResultError::from_constant(0x80094002); // CERTSRV_E_NO_REQUEST

/// The request's current status does not allow this operation.
pub const E_BAD_REQUESTSTATUS : HResultError = HResultError::from_constant(0x80094003); // CERTSRV_E_BAD_REQUESTSTATUS

/// The requested property value is empty.
pub const E_PROPERTY_EMPTY : HResultError = HResultError::from_constant(0x80094004); // CERTSRV_E_PROPERTY_EMPTY

/// The certification authority's certificate contains invalid data.
pub const E_INVALID_CA_CERTIFICATE : HResultError = HResultError::from_constant(0x80094005); // CERTSRV_E_INVALID_CA_CERTIFICATE

/// Certificate service has been suspended for a database restore operation.
pub const E_SERVER_SUSPENDED : HResultError = HResultError::from_constant(0x80094006); // CERTSRV_E_SERVER_SUSPENDED

/// The certificate contains an encoded length that is potentially incompatible with older enrollment software.
pub const E_ENCODING_LENGTH : HResultError = HResultError::from_constant(0x80094007); // CERTSRV_E_ENCODING_LENGTH

/// The operation is denied. The user has multiple roles assigned and the certification authority is configured to enforce role separation.
pub const E_ROLECONFLICT : HResultError = HResultError::from_constant(0x80094008); // CERTSRV_E_ROLECONFLICT

/// The operation is denied. It can only be performed by a certificate manager that is allowed to manage certificates for the current requester.
pub const E_RESTRICTEDOFFICER : HResultError = HResultError::from_constant(0x80094009); // CERTSRV_E_RESTRICTEDOFFICER

/// Cannot archive private key. The certification authority is not configured for key archival.
pub const E_KEY_ARCHIVAL_NOT_CONFIGURED : HResultError = HResultError::from_constant(0x8009400A); // CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED

/// Cannot archive private key. The certification authority could not verify one or more key recovery certificates.
pub const E_NO_VALID_KRA : HResultError = HResultError::from_constant(0x8009400B); // CERTSRV_E_NO_VALID_KRA

/// The request is incorrectly formatted. The encrypted private key must be in an unauthenticated attribute in an outermost signature.
pub const E_BAD_REQUEST_KEY_ARCHIVAL : HResultError = HResultError::from_constant(0x8009400C); // CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL

/// At least one security principal must have the permission to manage this CA.
pub const E_NO_CAADMIN_DEFINED : HResultError = HResultError::from_constant(0x8009400D); // CERTSRV_E_NO_CAADMIN_DEFINED

/// The request contains an invalid renewal certificate attribute.
pub const E_BAD_RENEWAL_CERT_ATTRIBUTE : HResultError = HResultError::from_constant(0x8009400E); // CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE

/// An attempt was made to open a Certification Authority database session, but there are already too many active sessions. The server may need to be configured to allow additional sessions.
pub const E_NO_DB_SESSIONS : HResultError = HResultError::from_constant(0x8009400F); // CERTSRV_E_NO_DB_SESSIONS

/// A memory reference caused a data alignment fault.
pub const E_ALIGNMENT_FAULT : HResultError = HResultError::from_constant(0x80094010); // CERTSRV_E_ALIGNMENT_FAULT

/// The permissions on this certification authority do not allow the current user to enroll for certificates.
pub const E_ENROLL_DENIED : HResultError = HResultError::from_constant(0x80094011); // CERTSRV_E_ENROLL_DENIED

/// The permissions on the certificate template do not allow the current user to enroll for this type of certificate.
pub const E_TEMPLATE_DENIED : HResultError = HResultError::from_constant(0x80094012); // CERTSRV_E_TEMPLATE_DENIED

/// The contacted domain controller cannot support signed LDAP traffic. Update the domain controller or configure Certificate Services to use SSL for Active Directory access.
pub const E_DOWNLEVEL_DC_SSL_OR_UPGRADE : HResultError = HResultError::from_constant(0x80094013); // CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE

/// The request was denied by a certificate manager or CA administrator.
pub const E_ADMIN_DENIED_REQUEST : HResultError = HResultError::from_constant(0x80094014); // CERTSRV_E_ADMIN_DENIED_REQUEST

/// An enrollment policy server cannot be located.
pub const E_NO_POLICY_SERVER : HResultError = HResultError::from_constant(0x80094015); // CERTSRV_E_NO_POLICY_SERVER

/// A signature algorithm or public key length does not meet the system's minimum required strength.
pub const E_WEAK_SIGNATURE_OR_KEY : HResultError = HResultError::from_constant(0x80094016); // CERTSRV_E_WEAK_SIGNATURE_OR_KEY

/// Failed to create an attested key.  This computer or the cryptographic provider may not meet the hardware requirements to support key attestation.
pub const E_KEY_ATTESTATION_NOT_SUPPORTED : HResultError = HResultError::from_constant(0x80094017); // CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED

/// No encryption certificate was specified.
pub const E_ENCRYPTION_CERT_REQUIRED : HResultError = HResultError::from_constant(0x80094018); // CERTSRV_E_ENCRYPTION_CERT_REQUIRED

/// The requested certificate template is not supported by this CA.
pub const E_UNSUPPORTED_CERT_TYPE : HResultError = HResultError::from_constant(0x80094800); // CERTSRV_E_UNSUPPORTED_CERT_TYPE

/// The request contains no certificate template information.
pub const E_NO_CERT_TYPE : HResultError = HResultError::from_constant(0x80094801); // CERTSRV_E_NO_CERT_TYPE

/// The request contains conflicting template information.
pub const E_TEMPLATE_CONFLICT : HResultError = HResultError::from_constant(0x80094802); // CERTSRV_E_TEMPLATE_CONFLICT

/// The request is missing a required Subject Alternate name extension.
pub const E_SUBJECT_ALT_NAME_REQUIRED : HResultError = HResultError::from_constant(0x80094803); // CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED

/// The request is missing a required private key for archival by the server.
pub const E_ARCHIVED_KEY_REQUIRED : HResultError = HResultError::from_constant(0x80094804); // CERTSRV_E_ARCHIVED_KEY_REQUIRED

/// The request is missing a required SMIME capabilities extension.
pub const E_SMIME_REQUIRED : HResultError = HResultError::from_constant(0x80094805); // CERTSRV_E_SMIME_REQUIRED

/// The request was made on behalf of a subject other than the caller. The certificate template must be configured to require at least one signature to authorize the request.
pub const E_BAD_RENEWAL_SUBJECT : HResultError = HResultError::from_constant(0x80094806); // CERTSRV_E_BAD_RENEWAL_SUBJECT

/// The request template version is newer than the supported template version.
pub const E_BAD_TEMPLATE_VERSION : HResultError = HResultError::from_constant(0x80094807); // CERTSRV_E_BAD_TEMPLATE_VERSION

/// The template is missing a required signature policy attribute.
pub const E_TEMPLATE_POLICY_REQUIRED : HResultError = HResultError::from_constant(0x80094808); // CERTSRV_E_TEMPLATE_POLICY_REQUIRED

/// The request is missing required signature policy information.
pub const E_SIGNATURE_POLICY_REQUIRED : HResultError = HResultError::from_constant(0x80094809); // CERTSRV_E_SIGNATURE_POLICY_REQUIRED

/// The request is missing one or more required signatures.
pub const E_SIGNATURE_COUNT : HResultError = HResultError::from_constant(0x8009480A); // CERTSRV_E_SIGNATURE_COUNT

/// One or more signatures did not include the required application or issuance policies. The request is missing one or more required valid signatures.
pub const E_SIGNATURE_REJECTED : HResultError = HResultError::from_constant(0x8009480B); // CERTSRV_E_SIGNATURE_REJECTED

/// The request is missing one or more required signature issuance policies.
pub const E_ISSUANCE_POLICY_REQUIRED : HResultError = HResultError::from_constant(0x8009480C); // CERTSRV_E_ISSUANCE_POLICY_REQUIRED

/// The UPN is unavailable and cannot be added to the Subject Alternate name.
pub const E_SUBJECT_UPN_REQUIRED : HResultError = HResultError::from_constant(0x8009480D); // CERTSRV_E_SUBJECT_UPN_REQUIRED

/// The Active Directory GUID is unavailable and cannot be added to the Subject Alternate name.
pub const E_SUBJECT_DIRECTORY_GUID_REQUIRED : HResultError = HResultError::from_constant(0x8009480E); // CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED

/// The DNS name is unavailable and cannot be added to the Subject Alternate name.
pub const E_SUBJECT_DNS_REQUIRED : HResultError = HResultError::from_constant(0x8009480F); // CERTSRV_E_SUBJECT_DNS_REQUIRED

/// The request includes a private key for archival by the server, but key archival is not enabled for the specified certificate template.
pub const E_ARCHIVED_KEY_UNEXPECTED : HResultError = HResultError::from_constant(0x80094810); // CERTSRV_E_ARCHIVED_KEY_UNEXPECTED

/// The public key does not meet the minimum size required by the specified certificate template.
pub const E_KEY_LENGTH : HResultError = HResultError::from_constant(0x80094811); // CERTSRV_E_KEY_LENGTH

/// The EMail name is unavailable and cannot be added to the Subject or Subject Alternate name.
pub const E_SUBJECT_EMAIL_REQUIRED : HResultError = HResultError::from_constant(0x80094812); // CERTSRV_E_SUBJECT_EMAIL_REQUIRED

/// One or more certificate templates to be enabled on this certification authority could not be found.
pub const E_UNKNOWN_CERT_TYPE : HResultError = HResultError::from_constant(0x80094813); // CERTSRV_E_UNKNOWN_CERT_TYPE

/// The certificate template renewal period is longer than the certificate validity period. The template should be reconfigured or the CA certificate renewed.
pub const E_CERT_TYPE_OVERLAP : HResultError = HResultError::from_constant(0x80094814); // CERTSRV_E_CERT_TYPE_OVERLAP

/// The certificate template requires too many RA signatures. Only one RA signature is allowed.
pub const E_TOO_MANY_SIGNATURES : HResultError = HResultError::from_constant(0x80094815); // CERTSRV_E_TOO_MANY_SIGNATURES

/// The certificate template requires renewal with the same public key, but the request uses a different public key.
pub const E_RENEWAL_BAD_PUBLIC_KEY : HResultError = HResultError::from_constant(0x80094816); // CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY

/// The certification authority cannot interpret or verify the endorsement key information supplied in the request, or the information is inconsistent.
pub const E_INVALID_EK : HResultError = HResultError::from_constant(0x80094817); // CERTSRV_E_INVALID_EK

/// The certification authority cannot validate the Attestation Identity Key Id Binding.
pub const E_INVALID_IDBINDING : HResultError = HResultError::from_constant(0x80094818); // CERTSRV_E_INVALID_IDBINDING

/// The certification authority cannot validate the private key attestation data.
pub const E_INVALID_ATTESTATION : HResultError = HResultError::from_constant(0x80094819); // CERTSRV_E_INVALID_ATTESTATION

/// The request does not support private key attestation as defined in the certificate template.
pub const E_KEY_ATTESTATION : HResultError = HResultError::from_constant(0x8009481A); // CERTSRV_E_KEY_ATTESTATION

/// The request public key is not consistent with the private key attestation data.
pub const E_CORRUPT_KEY_ATTESTATION : HResultError = HResultError::from_constant(0x8009481B); // CERTSRV_E_CORRUPT_KEY_ATTESTATION

/// The private key attestation challenge cannot be validated because the encryption certificate has expired, or the certificate or key is unavailable.
pub const E_EXPIRED_CHALLENGE : HResultError = HResultError::from_constant(0x8009481C); // CERTSRV_E_EXPIRED_CHALLENGE

/// The client's response could not be validated. It is either unexpected or incorrect.
pub const E_INVALID_RESPONSE : HResultError = HResultError::from_constant(0x8009481D); // CERTSRV_E_INVALID_RESPONSE

/// A valid Request ID was not detected in the request attributes, or an invalid one was submitted.
pub const E_INVALID_REQUESTID : HResultError = HResultError::from_constant(0x8009481E); // CERTSRV_E_INVALID_REQUESTID

/// The request is not consistent with the previously generated precertificate.
pub const E_REQUEST_PRECERTIFICATE_MISMATCH : HResultError = HResultError::from_constant(0x8009481F); // CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH

/// The request is locked against edits until a response is received from the client.
pub const E_PENDING_CLIENT_RESPONSE : HResultError = HResultError::from_constant(0x80094820); // CERTSRV_E_PENDING_CLIENT_RESPONSE

/// The Active Directory SID is unavailable and cannot be added to the custom security extension.
pub const E_SEC_EXT_DIRECTORY_SID_REQUIRED : HResultError = HResultError::from_constant(0x80094821); // CERTSRV_E_SEC_EXT_DIRECTORY_SID_REQUIRED
