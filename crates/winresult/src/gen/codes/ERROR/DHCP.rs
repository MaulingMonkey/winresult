// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The DHCP client has obtained an IP address that is already in use on the network. The local interface will be disabled until the DHCP client can obtain a new address.
pub const ADDRESS_CONFLICT : ErrorCode = ErrorCode::from_constant(4100); // ERROR_DHCP_ADDRESS_CONFLICT

pub const REGISTRY_INIT_FAILED : ErrorCode = ErrorCode::from_constant(0x00004E20); // ERROR_DHCP_REGISTRY_INIT_FAILED
pub const DATABASE_INIT_FAILED : ErrorCode = ErrorCode::from_constant(0x00004E21); // ERROR_DHCP_DATABASE_INIT_FAILED
pub const RPC_INIT_FAILED : ErrorCode = ErrorCode::from_constant(0x00004E22); // ERROR_DHCP_RPC_INIT_FAILED
pub const NETWORK_INIT_FAILED : ErrorCode = ErrorCode::from_constant(0x00004E23); // ERROR_DHCP_NETWORK_INIT_FAILED
pub const SUBNET_EXITS : ErrorCode = ErrorCode::from_constant(0x00004E24); // ERROR_DHCP_SUBNET_EXITS
pub const SUBNET_NOT_PRESENT : ErrorCode = ErrorCode::from_constant(0x00004E25); // ERROR_DHCP_SUBNET_NOT_PRESENT
pub const PRIMARY_NOT_FOUND : ErrorCode = ErrorCode::from_constant(0x00004E26); // ERROR_DHCP_PRIMARY_NOT_FOUND
pub const ELEMENT_CANT_REMOVE : ErrorCode = ErrorCode::from_constant(0x00004E27); // ERROR_DHCP_ELEMENT_CANT_REMOVE
pub const OPTION_EXITS : ErrorCode = ErrorCode::from_constant(0x00004E29); // ERROR_DHCP_OPTION_EXITS
pub const OPTION_NOT_PRESENT : ErrorCode = ErrorCode::from_constant(0x00004E2A); // ERROR_DHCP_OPTION_NOT_PRESENT
pub const ADDRESS_NOT_AVAILABLE : ErrorCode = ErrorCode::from_constant(0x00004E2B); // ERROR_DHCP_ADDRESS_NOT_AVAILABLE
pub const RANGE_FULL : ErrorCode = ErrorCode::from_constant(0x00004E2C); // ERROR_DHCP_RANGE_FULL
pub const JET_ERROR : ErrorCode = ErrorCode::from_constant(0x00004E2D); // ERROR_DHCP_JET_ERROR
pub const CLIENT_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E2E); // ERROR_DHCP_CLIENT_EXISTS
pub const INVALID_DHCP_MESSAGE : ErrorCode = ErrorCode::from_constant(0x00004E2F); // ERROR_DHCP_INVALID_DHCP_MESSAGE
pub const INVALID_DHCP_CLIENT : ErrorCode = ErrorCode::from_constant(0x00004E30); // ERROR_DHCP_INVALID_DHCP_CLIENT
pub const SERVICE_PAUSED : ErrorCode = ErrorCode::from_constant(0x00004E31); // ERROR_DHCP_SERVICE_PAUSED
pub const NOT_RESERVED_CLIENT : ErrorCode = ErrorCode::from_constant(0x00004E32); // ERROR_DHCP_NOT_RESERVED_CLIENT
pub const RESERVED_CLIENT : ErrorCode = ErrorCode::from_constant(0x00004E33); // ERROR_DHCP_RESERVED_CLIENT
pub const RANGE_TOO_SMALL : ErrorCode = ErrorCode::from_constant(0x00004E34); // ERROR_DHCP_RANGE_TOO_SMALL
pub const IPRANGE_EXITS : ErrorCode = ErrorCode::from_constant(0x00004E35); // ERROR_DHCP_IPRANGE_EXITS
pub const RESERVEDIP_EXITS : ErrorCode = ErrorCode::from_constant(0x00004E36); // ERROR_DHCP_RESERVEDIP_EXITS
pub const INVALID_RANGE : ErrorCode = ErrorCode::from_constant(0x00004E37); // ERROR_DHCP_INVALID_RANGE
pub const RANGE_EXTENDED : ErrorCode = ErrorCode::from_constant(0x00004E38); // ERROR_DHCP_RANGE_EXTENDED
pub const JET_CONV_REQUIRED : ErrorCode = ErrorCode::from_constant(0x00004E3B); // ERROR_DHCP_JET_CONV_REQUIRED
pub const SUPER_SCOPE_NAME_TOO_LONG : ErrorCode = ErrorCode::from_constant(0x00004E3E); // ERROR_DHCP_SUPER_SCOPE_NAME_TOO_LONG
pub const IP_ADDRESS_IN_USE : ErrorCode = ErrorCode::from_constant(0x00004E40); // ERROR_DHCP_IP_ADDRESS_IN_USE
pub const LOG_FILE_PATH_TOO_LONG : ErrorCode = ErrorCode::from_constant(0x00004E41); // ERROR_DHCP_LOG_FILE_PATH_TOO_LONG
pub const UNSUPPORTED_CLIENT : ErrorCode = ErrorCode::from_constant(0x00004E42); // ERROR_DHCP_UNSUPPORTED_CLIENT
pub const JET97_CONV_REQUIRED : ErrorCode = ErrorCode::from_constant(0x00004E44); // ERROR_DHCP_JET97_CONV_REQUIRED
pub const ROGUE_INIT_FAILED : ErrorCode = ErrorCode::from_constant(0x00004E45); // ERROR_DHCP_ROGUE_INIT_FAILED
pub const ROGUE_SAMSHUTDOWN : ErrorCode = ErrorCode::from_constant(0x00004E46); // ERROR_DHCP_ROGUE_SAMSHUTDOWN
pub const ROGUE_NOT_AUTHORIZED : ErrorCode = ErrorCode::from_constant(0x00004E47); // ERROR_DHCP_ROGUE_NOT_AUTHORIZED
pub const ROGUE_DS_UNREACHABLE : ErrorCode = ErrorCode::from_constant(0x00004E48); // ERROR_DHCP_ROGUE_DS_UNREACHABLE
pub const ROGUE_DS_CONFLICT : ErrorCode = ErrorCode::from_constant(0x00004E49); // ERROR_DHCP_ROGUE_DS_CONFLICT
pub const ROGUE_NOT_OUR_ENTERPRISE : ErrorCode = ErrorCode::from_constant(0x00004E4A); // ERROR_DHCP_ROGUE_NOT_OUR_ENTERPRISE
pub const ROGUE_STANDALONE_IN_DS : ErrorCode = ErrorCode::from_constant(0x00004E4B); // ERROR_DHCP_ROGUE_STANDALONE_IN_DS
pub const CLASS_NOT_FOUND : ErrorCode = ErrorCode::from_constant(0x00004E4C); // ERROR_DHCP_CLASS_NOT_FOUND
pub const CLASS_ALREADY_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E4D); // ERROR_DHCP_CLASS_ALREADY_EXISTS
pub const SCOPE_NAME_TOO_LONG : ErrorCode = ErrorCode::from_constant(0x00004E4E); // ERROR_DHCP_SCOPE_NAME_TOO_LONG
pub const DEFAULT_SCOPE_EXITS : ErrorCode = ErrorCode::from_constant(0x00004E4F); // ERROR_DHCP_DEFAULT_SCOPE_EXITS
pub const CANT_CHANGE_ATTRIBUTE : ErrorCode = ErrorCode::from_constant(0x00004E50); // ERROR_DHCP_CANT_CHANGE_ATTRIBUTE
pub const IPRANGE_CONV_ILLEGAL : ErrorCode = ErrorCode::from_constant(0x00004E51); // ERROR_DHCP_IPRANGE_CONV_ILLEGAL
pub const NETWORK_CHANGED : ErrorCode = ErrorCode::from_constant(0x00004E52); // ERROR_DHCP_NETWORK_CHANGED
pub const CANNOT_MODIFY_BINDINGS : ErrorCode = ErrorCode::from_constant(0x00004E53); // ERROR_DHCP_CANNOT_MODIFY_BINDINGS
pub const SUBNET_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E54); // ERROR_DHCP_SUBNET_EXISTS
pub const MSCOPE_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E55); // ERROR_DHCP_MSCOPE_EXISTS
pub const EXEMPTION_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E57); // ERROR_DHCP_EXEMPTION_EXISTS
pub const EXEMPTION_NOT_PRESENT : ErrorCode = ErrorCode::from_constant(0x00004E58); // ERROR_DHCP_EXEMPTION_NOT_PRESENT
pub const INVALID_PARAMETER_OPTION32 : ErrorCode = ErrorCode::from_constant(0x00004E59); // ERROR_DHCP_INVALID_PARAMETER_OPTION32
pub const DELETE_BUILTIN_CLASS : ErrorCode = ErrorCode::from_constant(0x00004E79); // ERROR_DHCP_DELETE_BUILTIN_CLASS
pub const INVALID_SUBNET_PREFIX : ErrorCode = ErrorCode::from_constant(0x00004E7B); // ERROR_DHCP_INVALID_SUBNET_PREFIX
pub const INVALID_DELAY : ErrorCode = ErrorCode::from_constant(0x00004E7C); // ERROR_DHCP_INVALID_DELAY
pub const LINKLAYER_ADDRESS_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E7D); // ERROR_DHCP_LINKLAYER_ADDRESS_EXISTS
pub const LINKLAYER_ADDRESS_RESERVATION_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E7E); // ERROR_DHCP_LINKLAYER_ADDRESS_RESERVATION_EXISTS
pub const LINKLAYER_ADDRESS_DOES_NOT_EXIST : ErrorCode = ErrorCode::from_constant(0x00004E7F); // ERROR_DHCP_LINKLAYER_ADDRESS_DOES_NOT_EXIST
pub const HARDWARE_ADDRESS_TYPE_ALREADY_EXEMPT : ErrorCode = ErrorCode::from_constant(0x00004E85); // ERROR_DHCP_HARDWARE_ADDRESS_TYPE_ALREADY_EXEMPT
pub const UNDEFINED_HARDWARE_ADDRESS_TYPE : ErrorCode = ErrorCode::from_constant(0x00004E86); // ERROR_DHCP_UNDEFINED_HARDWARE_ADDRESS_TYPE
pub const OPTION_TYPE_MISMATCH : ErrorCode = ErrorCode::from_constant(0x00004E87); // ERROR_DHCP_OPTION_TYPE_MISMATCH
pub const POLICY_BAD_PARENT_EXPR : ErrorCode = ErrorCode::from_constant(0x00004E88); // ERROR_DHCP_POLICY_BAD_PARENT_EXPR
pub const POLICY_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E89); // ERROR_DHCP_POLICY_EXISTS
pub const POLICY_RANGE_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E8A); // ERROR_DHCP_POLICY_RANGE_EXISTS
pub const POLICY_RANGE_BAD : ErrorCode = ErrorCode::from_constant(0x00004E8B); // ERROR_DHCP_POLICY_RANGE_BAD
pub const RANGE_INVALID_IN_SERVER_POLICY : ErrorCode = ErrorCode::from_constant(0x00004E8C); // ERROR_DHCP_RANGE_INVALID_IN_SERVER_POLICY
pub const INVALID_POLICY_EXPRESSION : ErrorCode = ErrorCode::from_constant(0x00004E8D); // ERROR_DHCP_INVALID_POLICY_EXPRESSION
pub const INVALID_PROCESSING_ORDER : ErrorCode = ErrorCode::from_constant(0x00004E8E); // ERROR_DHCP_INVALID_PROCESSING_ORDER
pub const POLICY_NOT_FOUND : ErrorCode = ErrorCode::from_constant(0x00004E8F); // ERROR_DHCP_POLICY_NOT_FOUND

/// DHCP failover error codes
pub const FO_SCOPE_ALREADY_IN_RELATIONSHIP : ErrorCode = ErrorCode::from_constant(0x00004E91); // ERROR_DHCP_FO_SCOPE_ALREADY_IN_RELATIONSHIP

/// DHCP failover error codes
pub const FO_RELATIONSHIP_EXISTS : ErrorCode = ErrorCode::from_constant(0x00004E92); // ERROR_DHCP_FO_RELATIONSHIP_EXISTS

pub const FO_RELATIONSHIP_DOES_NOT_EXIST : ErrorCode = ErrorCode::from_constant(0x00004E93); // ERROR_DHCP_FO_RELATIONSHIP_DOES_NOT_EXIST
pub const FO_SCOPE_NOT_IN_RELATIONSHIP : ErrorCode = ErrorCode::from_constant(0x00004E94); // ERROR_DHCP_FO_SCOPE_NOT_IN_RELATIONSHIP
pub const FO_RELATION_IS_SECONDARY : ErrorCode = ErrorCode::from_constant(0x00004E95); // ERROR_DHCP_FO_RELATION_IS_SECONDARY
pub const FO_NOT_SUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004E96); // ERROR_DHCP_FO_NOT_SUPPORTED
pub const FO_TIME_OUT_OF_SYNC : ErrorCode = ErrorCode::from_constant(0x00004E97); // ERROR_DHCP_FO_TIME_OUT_OF_SYNC
pub const FO_STATE_NOT_NORMAL : ErrorCode = ErrorCode::from_constant(0x00004E98); // ERROR_DHCP_FO_STATE_NOT_NORMAL
pub const NO_ADMIN_PERMISSION : ErrorCode = ErrorCode::from_constant(0x00004E99); // ERROR_DHCP_NO_ADMIN_PERMISSION
pub const SERVER_NOT_REACHABLE : ErrorCode = ErrorCode::from_constant(0x00004E9A); // ERROR_DHCP_SERVER_NOT_REACHABLE
pub const SERVER_NOT_RUNNING : ErrorCode = ErrorCode::from_constant(0x00004E9B); // ERROR_DHCP_SERVER_NOT_RUNNING
pub const SERVER_NAME_NOT_RESOLVED : ErrorCode = ErrorCode::from_constant(0x00004E9C); // ERROR_DHCP_SERVER_NAME_NOT_RESOLVED
pub const FO_RELATIONSHIP_NAME_TOO_LONG : ErrorCode = ErrorCode::from_constant(0x00004E9D); // ERROR_DHCP_FO_RELATIONSHIP_NAME_TOO_LONG
pub const REACHED_END_OF_SELECTION : ErrorCode = ErrorCode::from_constant(0x00004E9E); // ERROR_DHCP_REACHED_END_OF_SELECTION
pub const FO_ADDSCOPE_LEASES_NOT_SYNCED : ErrorCode = ErrorCode::from_constant(0x00004E9F); // ERROR_DHCP_FO_ADDSCOPE_LEASES_NOT_SYNCED
pub const FO_MAX_RELATIONSHIPS : ErrorCode = ErrorCode::from_constant(0x00004EA0); // ERROR_DHCP_FO_MAX_RELATIONSHIPS
pub const FO_IPRANGE_TYPE_CONV_ILLEGAL : ErrorCode = ErrorCode::from_constant(0x00004EA1); // ERROR_DHCP_FO_IPRANGE_TYPE_CONV_ILLEGAL
pub const FO_MAX_ADD_SCOPES : ErrorCode = ErrorCode::from_constant(0x00004EA2); // ERROR_DHCP_FO_MAX_ADD_SCOPES
pub const FO_BOOT_NOT_SUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EA3); // ERROR_DHCP_FO_BOOT_NOT_SUPPORTED
pub const FO_RANGE_PART_OF_REL : ErrorCode = ErrorCode::from_constant(0x00004EA4); // ERROR_DHCP_FO_RANGE_PART_OF_REL
pub const FO_SCOPE_SYNC_IN_PROGRESS : ErrorCode = ErrorCode::from_constant(0x00004EA5); // ERROR_DHCP_FO_SCOPE_SYNC_IN_PROGRESS
pub const FO_FEATURE_NOT_SUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EA6); // ERROR_DHCP_FO_FEATURE_NOT_SUPPORTED
pub const POLICY_FQDN_RANGE_UNSUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EA7); // ERROR_DHCP_POLICY_FQDN_RANGE_UNSUPPORTED
pub const POLICY_FQDN_OPTION_UNSUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EA8); // ERROR_DHCP_POLICY_FQDN_OPTION_UNSUPPORTED
pub const POLICY_EDIT_FQDN_UNSUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EA9); // ERROR_DHCP_POLICY_EDIT_FQDN_UNSUPPORTED
pub const NAP_NOT_SUPPORTED : ErrorCode = ErrorCode::from_constant(0x00004EAA); // ERROR_DHCP_NAP_NOT_SUPPORTED
