// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// The specified channel path is invalid.
pub const INVALID_CHANNEL_PATH : ErrorCode = ErrorCode::from_constant(15000); // ERROR_EVT_INVALID_CHANNEL_PATH

/// The specified query is invalid.
pub const INVALID_QUERY : ErrorCode = ErrorCode::from_constant(15001); // ERROR_EVT_INVALID_QUERY

/// The publisher metadata cannot be found in the resource.
pub const PUBLISHER_METADATA_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15002); // ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND

/// The template for an event definition cannot be found in the resource (error = `%1`).
pub const EVENT_TEMPLATE_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15003); // ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND

/// The specified publisher name is invalid.
pub const INVALID_PUBLISHER_NAME : ErrorCode = ErrorCode::from_constant(15004); // ERROR_EVT_INVALID_PUBLISHER_NAME

/// The event data raised by the publisher is not compatible with the event template definition in the publisher's manifest.
pub const INVALID_EVENT_DATA : ErrorCode = ErrorCode::from_constant(15005); // ERROR_EVT_INVALID_EVENT_DATA

/// The specified channel could not be found.
pub const CHANNEL_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15007); // ERROR_EVT_CHANNEL_NOT_FOUND

/// The specified XML text was not well-formed. See Extended Error for more details.
pub const MALFORMED_XML_TEXT : ErrorCode = ErrorCode::from_constant(15008); // ERROR_EVT_MALFORMED_XML_TEXT

/// The events for a direct channel go directly to a log file and cannot be subscribed to.
pub const SUBSCRIPTION_TO_DIRECT_CHANNEL : ErrorCode = ErrorCode::from_constant(15009); // ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL

/// Configuration error.
pub const CONFIGURATION_ERROR : ErrorCode = ErrorCode::from_constant(15010); // ERROR_EVT_CONFIGURATION_ERROR

/// The query result is stale or invalid and must be recreated. This may be due to the log being cleared or rolling over after the query result was created.
pub const QUERY_RESULT_STALE : ErrorCode = ErrorCode::from_constant(15011); // ERROR_EVT_QUERY_RESULT_STALE

/// The query result is currently at an invalid position.
pub const QUERY_RESULT_INVALID_POSITION : ErrorCode = ErrorCode::from_constant(15012); // ERROR_EVT_QUERY_RESULT_INVALID_POSITION

/// Registered MSXML doesn't support validation.
pub const NON_VALIDATING_MSXML : ErrorCode = ErrorCode::from_constant(15013); // ERROR_EVT_NON_VALIDATING_MSXML

/// An expression can only be followed by a change-of-scope operation if the expression evaluates to a node set and is not already part of another change-of-scope operation.
pub const FILTER_ALREADYSCOPED : ErrorCode = ErrorCode::from_constant(15014); // ERROR_EVT_FILTER_ALREADYSCOPED

/// Cannot perform a step operation from a term that does not represent an element set.
pub const FILTER_NOTELTSET : ErrorCode = ErrorCode::from_constant(15015); // ERROR_EVT_FILTER_NOTELTSET

/// Left-hand side arguments to binary operators must be either attributes, nodes or variables. Right-hand side arguments must be constants.
pub const FILTER_INVARG : ErrorCode = ErrorCode::from_constant(15016); // ERROR_EVT_FILTER_INVARG

/// A step operation must involve a node test or, in the case of a predicate, an algebraic expression against which to test each node in the preceeding node set.
pub const FILTER_INVTEST : ErrorCode = ErrorCode::from_constant(15017); // ERROR_EVT_FILTER_INVTEST

/// This data type is currently unsupported.
pub const FILTER_INVTYPE : ErrorCode = ErrorCode::from_constant(15018); // ERROR_EVT_FILTER_INVTYPE

/// A syntax error occurred at position `%1`!d!
pub const FILTER_PARSEERR : ErrorCode = ErrorCode::from_constant(15019); // ERROR_EVT_FILTER_PARSEERR

/// This operator is unsupported by this implementation of the filter.
pub const FILTER_UNSUPPORTEDOP : ErrorCode = ErrorCode::from_constant(15020); // ERROR_EVT_FILTER_UNSUPPORTEDOP

/// An unexpected token was encountered.
pub const FILTER_UNEXPECTEDTOKEN : ErrorCode = ErrorCode::from_constant(15021); // ERROR_EVT_FILTER_UNEXPECTEDTOKEN

/// The requested operation cannot be performed over an enabled direct channel. The channel must first be disabled.
pub const INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL : ErrorCode = ErrorCode::from_constant(15022); // ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL

/// Channel property `%1`!s! contains an invalid value. The value has an invalid type, is outside of its valid range, cannot be changed, or is not supported by this type of channel.
pub const INVALID_CHANNEL_PROPERTY_VALUE : ErrorCode = ErrorCode::from_constant(15023); // ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE

/// Publisher property `%1`!s! contains an invalid value. The value has an invalid type, is outside of its valid range, cannot be changed, or is not supported by this type of publisher.
pub const INVALID_PUBLISHER_PROPERTY_VALUE : ErrorCode = ErrorCode::from_constant(15024); // ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE

/// The channel failed to activate.
pub const CHANNEL_CANNOT_ACTIVATE : ErrorCode = ErrorCode::from_constant(15025); // ERROR_EVT_CHANNEL_CANNOT_ACTIVATE

/// The XPath expression exceeded the supported complexity. Simplify the expression or split it into multiple expressions.
pub const FILTER_TOO_COMPLEX : ErrorCode = ErrorCode::from_constant(15026); // ERROR_EVT_FILTER_TOO_COMPLEX

/// The message resource is present but the message was not found in the message table.
pub const MESSAGE_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15027); // ERROR_EVT_MESSAGE_NOT_FOUND

/// The message ID for the desired message could not be found.
pub const MESSAGE_ID_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15028); // ERROR_EVT_MESSAGE_ID_NOT_FOUND

/// The substitution string for insert index (`%1`) could not be found.
pub const UNRESOLVED_VALUE_INSERT : ErrorCode = ErrorCode::from_constant(15029); // ERROR_EVT_UNRESOLVED_VALUE_INSERT

/// The description string for parameter reference (`%1`) could not be found.
pub const UNRESOLVED_PARAMETER_INSERT : ErrorCode = ErrorCode::from_constant(15030); // ERROR_EVT_UNRESOLVED_PARAMETER_INSERT

/// The maximum number of replacements has been reached.
pub const MAX_INSERTS_REACHED : ErrorCode = ErrorCode::from_constant(15031); // ERROR_EVT_MAX_INSERTS_REACHED

/// The event definition could not be found for event ID (`%1`).
pub const EVENT_DEFINITION_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15032); // ERROR_EVT_EVENT_DEFINITION_NOT_FOUND

/// The locale specific resource for the desired message is not present.
pub const MESSAGE_LOCALE_NOT_FOUND : ErrorCode = ErrorCode::from_constant(15033); // ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND

/// The resource is too old and is not supported.
pub const VERSION_TOO_OLD : ErrorCode = ErrorCode::from_constant(15034); // ERROR_EVT_VERSION_TOO_OLD

/// The resource is too new and is not supported.
pub const VERSION_TOO_NEW : ErrorCode = ErrorCode::from_constant(15035); // ERROR_EVT_VERSION_TOO_NEW

/// The channel at index `%1`!d! of the query can't be opened.
pub const CANNOT_OPEN_CHANNEL_OF_QUERY : ErrorCode = ErrorCode::from_constant(15036); // ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY

/// The publisher has been disabled and its resource is not available. This usually occurs when the publisher is in the process of being uninstalled or upgraded.
pub const PUBLISHER_DISABLED : ErrorCode = ErrorCode::from_constant(15037); // ERROR_EVT_PUBLISHER_DISABLED

/// Attempted to create a numeric type that is outside of its valid range.
pub const FILTER_OUT_OF_RANGE : ErrorCode = ErrorCode::from_constant(15038); // ERROR_EVT_FILTER_OUT_OF_RANGE
