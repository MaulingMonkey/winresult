// WARNING: this file is auto-generated by xtask gen and may be overwritten

use super::*;


/// SQL error or missing database
pub const E_ERROR : HResultError = HResultError::from_constant(0x87AF0001); // SQLITE_E_ERROR

/// Internal logic error in SQLite
pub const E_INTERNAL : HResultError = HResultError::from_constant(0x87AF0002); // SQLITE_E_INTERNAL

/// Access permission denied
pub const E_PERM : HResultError = HResultError::from_constant(0x87AF0003); // SQLITE_E_PERM

/// Callback routine requested an abort
pub const E_ABORT : HResultError = HResultError::from_constant(0x87AF0004); // SQLITE_E_ABORT

/// The database file is locked
pub const E_BUSY : HResultError = HResultError::from_constant(0x87AF0005); // SQLITE_E_BUSY

/// A table in the database is locked
pub const E_LOCKED : HResultError = HResultError::from_constant(0x87AF0006); // SQLITE_E_LOCKED

/// A malloc() failed
pub const E_NOMEM : HResultError = HResultError::from_constant(0x87AF0007); // SQLITE_E_NOMEM

/// Attempt to write a readonly database
pub const E_READONLY : HResultError = HResultError::from_constant(0x87AF0008); // SQLITE_E_READONLY

/// Operation terminated by sqlite3_interrupt()
pub const E_INTERRUPT : HResultError = HResultError::from_constant(0x87AF0009); // SQLITE_E_INTERRUPT

/// Some kind of disk I/O error occurred
pub const E_IOERR : HResultError = HResultError::from_constant(0x87AF000A); // SQLITE_E_IOERR

/// The database disk image is malformed
pub const E_CORRUPT : HResultError = HResultError::from_constant(0x87AF000B); // SQLITE_E_CORRUPT

/// Unknown opcode in sqlite3_file_control()
pub const E_NOTFOUND : HResultError = HResultError::from_constant(0x87AF000C); // SQLITE_E_NOTFOUND

/// Insertion failed because database is full
pub const E_FULL : HResultError = HResultError::from_constant(0x87AF000D); // SQLITE_E_FULL

/// Unable to open the database file
pub const E_CANTOPEN : HResultError = HResultError::from_constant(0x87AF000E); // SQLITE_E_CANTOPEN

/// Database lock protocol error
pub const E_PROTOCOL : HResultError = HResultError::from_constant(0x87AF000F); // SQLITE_E_PROTOCOL

/// Database is empty
pub const E_EMPTY : HResultError = HResultError::from_constant(0x87AF0010); // SQLITE_E_EMPTY

/// The database schema changed
pub const E_SCHEMA : HResultError = HResultError::from_constant(0x87AF0011); // SQLITE_E_SCHEMA

/// String or BLOB exceeds size limit
pub const E_TOOBIG : HResultError = HResultError::from_constant(0x87AF0012); // SQLITE_E_TOOBIG

/// Abort due to constraint violation
pub const E_CONSTRAINT : HResultError = HResultError::from_constant(0x87AF0013); // SQLITE_E_CONSTRAINT

/// Data type mismatch
pub const E_MISMATCH : HResultError = HResultError::from_constant(0x87AF0014); // SQLITE_E_MISMATCH

/// Library used incorrectly
pub const E_MISUSE : HResultError = HResultError::from_constant(0x87AF0015); // SQLITE_E_MISUSE

/// Uses OS features not supported on host
pub const E_NOLFS : HResultError = HResultError::from_constant(0x87AF0016); // SQLITE_E_NOLFS

/// Authorization denied
pub const E_AUTH : HResultError = HResultError::from_constant(0x87AF0017); // SQLITE_E_AUTH

/// Auxiliary database format error
pub const E_FORMAT : HResultError = HResultError::from_constant(0x87AF0018); // SQLITE_E_FORMAT

/// 2nd parameter to sqlite3_bind out of range
pub const E_RANGE : HResultError = HResultError::from_constant(0x87AF0019); // SQLITE_E_RANGE

/// File opened that is not a database file
pub const E_NOTADB : HResultError = HResultError::from_constant(0x87AF001A); // SQLITE_E_NOTADB

/// Notifications from sqlite3_log()
pub const E_NOTICE : HResultError = HResultError::from_constant(0x87AF001B); // SQLITE_E_NOTICE

/// Warnings from sqlite3_log()
pub const E_WARNING : HResultError = HResultError::from_constant(0x87AF001C); // SQLITE_E_WARNING

/// sqlite3_step() has another row ready
pub const E_ROW : HResultError = HResultError::from_constant(0x87AF0064); // SQLITE_E_ROW

/// sqlite3_step() has finished executing
pub const E_DONE : HResultError = HResultError::from_constant(0x87AF0065); // SQLITE_E_DONE

/// SQLITE_IOERR_READ
pub const E_IOERR_READ : HResultError = HResultError::from_constant(0x87AF010A); // SQLITE_E_IOERR_READ

/// SQLITE_IOERR_SHORT_READ
pub const E_IOERR_SHORT_READ : HResultError = HResultError::from_constant(0x87AF020A); // SQLITE_E_IOERR_SHORT_READ

/// SQLITE_IOERR_WRITE
pub const E_IOERR_WRITE : HResultError = HResultError::from_constant(0x87AF030A); // SQLITE_E_IOERR_WRITE

/// SQLITE_IOERR_FSYNC
pub const E_IOERR_FSYNC : HResultError = HResultError::from_constant(0x87AF040A); // SQLITE_E_IOERR_FSYNC

/// SQLITE_IOERR_DIR_FSYNC
pub const E_IOERR_DIR_FSYNC : HResultError = HResultError::from_constant(0x87AF050A); // SQLITE_E_IOERR_DIR_FSYNC

/// SQLITE_IOERR_TRUNCATE
pub const E_IOERR_TRUNCATE : HResultError = HResultError::from_constant(0x87AF060A); // SQLITE_E_IOERR_TRUNCATE

/// SQLITE_IOERR_FSTAT
pub const E_IOERR_FSTAT : HResultError = HResultError::from_constant(0x87AF070A); // SQLITE_E_IOERR_FSTAT

/// SQLITE_IOERR_UNLOCK
pub const E_IOERR_UNLOCK : HResultError = HResultError::from_constant(0x87AF080A); // SQLITE_E_IOERR_UNLOCK

/// SQLITE_IOERR_RDLOCK
pub const E_IOERR_RDLOCK : HResultError = HResultError::from_constant(0x87AF090A); // SQLITE_E_IOERR_RDLOCK

/// SQLITE_IOERR_DELETE
pub const E_IOERR_DELETE : HResultError = HResultError::from_constant(0x87AF0A0A); // SQLITE_E_IOERR_DELETE

/// SQLITE_IOERR_BLOCKED
pub const E_IOERR_BLOCKED : HResultError = HResultError::from_constant(0x87AF0B0A); // SQLITE_E_IOERR_BLOCKED

/// SQLITE_IOERR_NOMEM
pub const E_IOERR_NOMEM : HResultError = HResultError::from_constant(0x87AF0C0A); // SQLITE_E_IOERR_NOMEM

/// SQLITE_IOERR_ACCESS
pub const E_IOERR_ACCESS : HResultError = HResultError::from_constant(0x87AF0D0A); // SQLITE_E_IOERR_ACCESS

/// SQLITE_IOERR_CHECKRESERVEDLOCK
pub const E_IOERR_CHECKRESERVEDLOCK : HResultError = HResultError::from_constant(0x87AF0E0A); // SQLITE_E_IOERR_CHECKRESERVEDLOCK

/// SQLITE_IOERR_LOCK
pub const E_IOERR_LOCK : HResultError = HResultError::from_constant(0x87AF0F0A); // SQLITE_E_IOERR_LOCK

/// SQLITE_IOERR_CLOSE
pub const E_IOERR_CLOSE : HResultError = HResultError::from_constant(0x87AF100A); // SQLITE_E_IOERR_CLOSE

/// SQLITE_IOERR_DIR_CLOSE
pub const E_IOERR_DIR_CLOSE : HResultError = HResultError::from_constant(0x87AF110A); // SQLITE_E_IOERR_DIR_CLOSE

/// SQLITE_IOERR_SHMOPEN
pub const E_IOERR_SHMOPEN : HResultError = HResultError::from_constant(0x87AF120A); // SQLITE_E_IOERR_SHMOPEN

/// SQLITE_IOERR_SHMSIZE
pub const E_IOERR_SHMSIZE : HResultError = HResultError::from_constant(0x87AF130A); // SQLITE_E_IOERR_SHMSIZE

/// SQLITE_IOERR_SHMLOCK
pub const E_IOERR_SHMLOCK : HResultError = HResultError::from_constant(0x87AF140A); // SQLITE_E_IOERR_SHMLOCK

/// SQLITE_IOERR_SHMMAP
pub const E_IOERR_SHMMAP : HResultError = HResultError::from_constant(0x87AF150A); // SQLITE_E_IOERR_SHMMAP

/// SQLITE_IOERR_SEEK
pub const E_IOERR_SEEK : HResultError = HResultError::from_constant(0x87AF160A); // SQLITE_E_IOERR_SEEK

/// SQLITE_IOERR_DELETE_NOENT
pub const E_IOERR_DELETE_NOENT : HResultError = HResultError::from_constant(0x87AF170A); // SQLITE_E_IOERR_DELETE_NOENT

/// SQLITE_IOERR_MMAP
pub const E_IOERR_MMAP : HResultError = HResultError::from_constant(0x87AF180A); // SQLITE_E_IOERR_MMAP

/// SQLITE_IOERR_GETTEMPPATH
pub const E_IOERR_GETTEMPPATH : HResultError = HResultError::from_constant(0x87AF190A); // SQLITE_E_IOERR_GETTEMPPATH

/// SQLITE_IOERR_CONVPATH
pub const E_IOERR_CONVPATH : HResultError = HResultError::from_constant(0x87AF1A0A); // SQLITE_E_IOERR_CONVPATH

/// SQLITE_IOERR_VNODE
pub const E_IOERR_VNODE : HResultError = HResultError::from_constant(0x87AF1A02); // SQLITE_E_IOERR_VNODE

/// SQLITE_IOERR_AUTH
pub const E_IOERR_AUTH : HResultError = HResultError::from_constant(0x87AF1A03); // SQLITE_E_IOERR_AUTH

/// SQLITE_LOCKED_SHAREDCACHE
pub const E_LOCKED_SHAREDCACHE : HResultError = HResultError::from_constant(0x87AF0106); // SQLITE_E_LOCKED_SHAREDCACHE

/// SQLITE_BUSY_RECOVERY
pub const E_BUSY_RECOVERY : HResultError = HResultError::from_constant(0x87AF0105); // SQLITE_E_BUSY_RECOVERY

/// SQLITE_BUSY_SNAPSHOT
pub const E_BUSY_SNAPSHOT : HResultError = HResultError::from_constant(0x87AF0205); // SQLITE_E_BUSY_SNAPSHOT

/// SQLITE_CANTOPEN_NOTEMPDIR
pub const E_CANTOPEN_NOTEMPDIR : HResultError = HResultError::from_constant(0x87AF010E); // SQLITE_E_CANTOPEN_NOTEMPDIR

/// SQLITE_CANTOPEN_ISDIR
pub const E_CANTOPEN_ISDIR : HResultError = HResultError::from_constant(0x87AF020E); // SQLITE_E_CANTOPEN_ISDIR

/// SQLITE_CANTOPEN_FULLPATH
pub const E_CANTOPEN_FULLPATH : HResultError = HResultError::from_constant(0x87AF030E); // SQLITE_E_CANTOPEN_FULLPATH

/// SQLITE_CANTOPEN_CONVPATH
pub const E_CANTOPEN_CONVPATH : HResultError = HResultError::from_constant(0x87AF040E); // SQLITE_E_CANTOPEN_CONVPATH

/// SQLITE_CORRUPT_VTAB
pub const E_CORRUPT_VTAB : HResultError = HResultError::from_constant(0x87AF010B); // SQLITE_E_CORRUPT_VTAB

/// SQLITE_READONLY_RECOVERY
pub const E_READONLY_RECOVERY : HResultError = HResultError::from_constant(0x87AF0108); // SQLITE_E_READONLY_RECOVERY

/// SQLITE_READONLY_CANTLOCK
pub const E_READONLY_CANTLOCK : HResultError = HResultError::from_constant(0x87AF0208); // SQLITE_E_READONLY_CANTLOCK

/// SQLITE_READONLY_ROLLBACK
pub const E_READONLY_ROLLBACK : HResultError = HResultError::from_constant(0x87AF0308); // SQLITE_E_READONLY_ROLLBACK

/// SQLITE_READONLY_DBMOVED
pub const E_READONLY_DBMOVED : HResultError = HResultError::from_constant(0x87AF0408); // SQLITE_E_READONLY_DBMOVED

/// SQLITE_ABORT_ROLLBACK
pub const E_ABORT_ROLLBACK : HResultError = HResultError::from_constant(0x87AF0204); // SQLITE_E_ABORT_ROLLBACK

/// SQLITE_CONSTRAINT_CHECK
pub const E_CONSTRAINT_CHECK : HResultError = HResultError::from_constant(0x87AF0113); // SQLITE_E_CONSTRAINT_CHECK

/// SQLITE_CONSTRAINT_COMMITHOOK
pub const E_CONSTRAINT_COMMITHOOK : HResultError = HResultError::from_constant(0x87AF0213); // SQLITE_E_CONSTRAINT_COMMITHOOK

/// SQLITE_CONSTRAINT_FOREIGNKEY
pub const E_CONSTRAINT_FOREIGNKEY : HResultError = HResultError::from_constant(0x87AF0313); // SQLITE_E_CONSTRAINT_FOREIGNKEY

/// SQLITE_CONSTRAINT_FUNCTION
pub const E_CONSTRAINT_FUNCTION : HResultError = HResultError::from_constant(0x87AF0413); // SQLITE_E_CONSTRAINT_FUNCTION

/// SQLITE_CONSTRAINT_NOTNULL
pub const E_CONSTRAINT_NOTNULL : HResultError = HResultError::from_constant(0x87AF0513); // SQLITE_E_CONSTRAINT_NOTNULL

/// SQLITE_CONSTRAINT_PRIMARYKEY
pub const E_CONSTRAINT_PRIMARYKEY : HResultError = HResultError::from_constant(0x87AF0613); // SQLITE_E_CONSTRAINT_PRIMARYKEY

/// SQLITE_CONSTRAINT_TRIGGER
pub const E_CONSTRAINT_TRIGGER : HResultError = HResultError::from_constant(0x87AF0713); // SQLITE_E_CONSTRAINT_TRIGGER

/// SQLITE_CONSTRAINT_UNIQUE
pub const E_CONSTRAINT_UNIQUE : HResultError = HResultError::from_constant(0x87AF0813); // SQLITE_E_CONSTRAINT_UNIQUE

/// SQLITE_CONSTRAINT_VTAB
pub const E_CONSTRAINT_VTAB : HResultError = HResultError::from_constant(0x87AF0913); // SQLITE_E_CONSTRAINT_VTAB

/// SQLITE_CONSTRAINT_ROWID
pub const E_CONSTRAINT_ROWID : HResultError = HResultError::from_constant(0x87AF0A13); // SQLITE_E_CONSTRAINT_ROWID

/// SQLITE_NOTICE_RECOVER_WAL
pub const E_NOTICE_RECOVER_WAL : HResultError = HResultError::from_constant(0x87AF011B); // SQLITE_E_NOTICE_RECOVER_WAL

/// SQLITE_NOTICE_RECOVER_ROLLBACK
pub const E_NOTICE_RECOVER_ROLLBACK : HResultError = HResultError::from_constant(0x87AF021B); // SQLITE_E_NOTICE_RECOVER_ROLLBACK

/// SQLITE_WARNING_AUTOINDEX
pub const E_WARNING_AUTOINDEX : HResultError = HResultError::from_constant(0x87AF011C); // SQLITE_E_WARNING_AUTOINDEX
